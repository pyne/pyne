###################
###  WARNING!!! ###
###################
# This file has been autogenerated

# Cython imports
from libcpp.utility cimport pair
from libcpp.map cimport map as cpp_map
from libcpp.set cimport set as cpp_set
from libcpp.vector cimport vector as cpp_vector
from cython.operator cimport dereference as deref
from cython.operator cimport preincrement as inc

# Python Imports
cimport numpy as np

# Local imports
include "include/cython_version.pxi"
IF CYTHON_VERSION_MAJOR == 0 and CYTHON_VERSION_MINOR >= 17:
    from libcpp.string cimport string as std_string
ELSE:
    from pyne._includes.libcpp.string cimport string as std_string
cimport extra_types


cdef extra_types.complex_t py2c_complex(object)

# integer sets
cdef cpp_set[int] py_to_cpp_set_int(set)
cdef set cpp_to_py_set_int(cpp_set[int])


# string sets
cdef cpp_set[std_string] py_to_cpp_set_str(set)
cdef set cpp_to_py_set_str(cpp_set[std_string])


# <integer, integer> conversions
cdef cpp_map[int, int] dict_to_map_int_int(dict)
cdef dict map_to_dict_int_int(cpp_map[int, int])



# <integer, double> conversions
cdef cpp_map[int, double] dict_to_map_int_dbl(dict)
cdef dict map_to_dict_int_dbl(cpp_map[int, double])



# <string, integer> conversions
cdef cpp_map[std_string, int] dict_to_map_str_int(dict)
cdef dict map_to_dict_str_int(cpp_map[std_string, int])



# <integer, string> conversions
cdef cpp_map[int, std_string] dict_to_map_int_str(dict)
cdef dict map_to_dict_int_str(cpp_map[int, std_string])



# <string, double> conversions
cdef cpp_map[std_string, double] dict_to_map_str_dbl(dict)
cdef dict map_to_dict_str_dbl(cpp_map[std_string, double])



# SetInt
cdef class SetIterInt(object):
    cdef cpp_set[int].iterator * iter_now
    cdef cpp_set[int].iterator * iter_end
    cdef void init(SetIterInt, cpp_set[int] *)

cdef class _SetInt:
    cdef cpp_set[int] * set_ptr
    cdef public bint _free_set




# SetStr
cdef class SetIterStr(object):
    cdef cpp_set[std_string].iterator * iter_now
    cdef cpp_set[std_string].iterator * iter_end
    cdef void init(SetIterStr, cpp_set[std_string] *)

cdef class _SetStr:
    cdef cpp_set[std_string] * set_ptr
    cdef public bint _free_set




# MapStrStr
cdef class MapIterStrStr(object):
    cdef cpp_map[std_string, std_string].iterator * iter_now
    cdef cpp_map[std_string, std_string].iterator * iter_end
    cdef void init(MapIterStrStr, cpp_map[std_string, std_string] *)

cdef class _MapStrStr:
    cdef cpp_map[std_string, std_string] * map_ptr
    cdef public bint _free_map




# MapStrInt
cdef class MapIterStrInt(object):
    cdef cpp_map[std_string, int].iterator * iter_now
    cdef cpp_map[std_string, int].iterator * iter_end
    cdef void init(MapIterStrInt, cpp_map[std_string, int] *)

cdef class _MapStrInt:
    cdef cpp_map[std_string, int] * map_ptr
    cdef public bint _free_map




# MapIntStr
cdef class MapIterIntStr(object):
    cdef cpp_map[int, std_string].iterator * iter_now
    cdef cpp_map[int, std_string].iterator * iter_end
    cdef void init(MapIterIntStr, cpp_map[int, std_string] *)

cdef class _MapIntStr:
    cdef cpp_map[int, std_string] * map_ptr
    cdef public bint _free_map




# MapStrUInt
cdef class MapIterStrUInt(object):
    cdef cpp_map[std_string, extra_types.uint].iterator * iter_now
    cdef cpp_map[std_string, extra_types.uint].iterator * iter_end
    cdef void init(MapIterStrUInt, cpp_map[std_string, extra_types.uint] *)

cdef class _MapStrUInt:
    cdef cpp_map[std_string, extra_types.uint] * map_ptr
    cdef public bint _free_map




# MapUIntStr
cdef class MapIterUIntStr(object):
    cdef cpp_map[extra_types.uint, std_string].iterator * iter_now
    cdef cpp_map[extra_types.uint, std_string].iterator * iter_end
    cdef void init(MapIterUIntStr, cpp_map[extra_types.uint, std_string] *)

cdef class _MapUIntStr:
    cdef cpp_map[extra_types.uint, std_string] * map_ptr
    cdef public bint _free_map




# MapUIntUInt
cdef class MapIterUIntUInt(object):
    cdef cpp_map[extra_types.uint, extra_types.uint].iterator * iter_now
    cdef cpp_map[extra_types.uint, extra_types.uint].iterator * iter_end
    cdef void init(MapIterUIntUInt, cpp_map[extra_types.uint, extra_types.uint] *)

cdef class _MapUIntUInt:
    cdef cpp_map[extra_types.uint, extra_types.uint] * map_ptr
    cdef public bint _free_map




# MapStrDouble
cdef class MapIterStrDouble(object):
    cdef cpp_map[std_string, double].iterator * iter_now
    cdef cpp_map[std_string, double].iterator * iter_end
    cdef void init(MapIterStrDouble, cpp_map[std_string, double] *)

cdef class _MapStrDouble:
    cdef cpp_map[std_string, double] * map_ptr
    cdef public bint _free_map




# MapIntInt
cdef class MapIterIntInt(object):
    cdef cpp_map[int, int].iterator * iter_now
    cdef cpp_map[int, int].iterator * iter_end
    cdef void init(MapIterIntInt, cpp_map[int, int] *)

cdef class _MapIntInt:
    cdef cpp_map[int, int] * map_ptr
    cdef public bint _free_map




# MapIntDouble
cdef class MapIterIntDouble(object):
    cdef cpp_map[int, double].iterator * iter_now
    cdef cpp_map[int, double].iterator * iter_end
    cdef void init(MapIterIntDouble, cpp_map[int, double] *)

cdef class _MapIntDouble:
    cdef cpp_map[int, double] * map_ptr
    cdef public bint _free_map




# MapIntComplex
cdef class MapIterIntComplex(object):
    cdef cpp_map[int, extra_types.complex_t].iterator * iter_now
    cdef cpp_map[int, extra_types.complex_t].iterator * iter_end
    cdef void init(MapIterIntComplex, cpp_map[int, extra_types.complex_t] *)

cdef class _MapIntComplex:
    cdef cpp_map[int, extra_types.complex_t] * map_ptr
    cdef public bint _free_map




