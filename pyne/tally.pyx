################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""
"""
from libc.stdlib cimport free
from libcpp.string cimport string as std_string





cdef class Tally:
    """there are no protected functions currently fool.
    
    Attributes
    ----------
    entity_type (std::string) :
    entity_name (std::string) :
    particle_name (std::string) :
    tally_type (std::string) :
    entity_id (int) :
    
    
    Methods
    -------
    Tally
    ~Tally
    
    Notes
    -----
    This class was defined in tally.h
    
    The class is found in the "pyne" namespace"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def _tally_tally_0(self, ):
        """Tally(self, )
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        empty constructor   there are no protected functions currently
        fool.
        
        Parameters
        ----------
        None
        
        Returns
        -------
        None
        
        ################################################################
        
        Constructor from passed in vars
        
        Parameters
        ----------
        particle_name : std::string
        
        entity_type : std::string
        
        type : std::string
        
        entity_name : std::string
        
        entity : int
        
        Returns
        -------
        None
        
        """
        self._inst = new cpp_tally.Tally()
    
    
    def _tally_tally_1(self, type, particle_name, entity, entity_type, entity_name):
        """Tally(self, type, particle_name, entity, entity_type, entity_name)
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        empty constructor   there are no protected functions currently
        fool.
        
        Parameters
        ----------
        None
        
        Returns
        -------
        None
        
        ################################################################
        
        Constructor from passed in vars
        
        Parameters
        ----------
        particle_name : std::string
        
        entity_type : std::string
        
        type : std::string
        
        entity_name : std::string
        
        entity : int
        
        Returns
        -------
        None
        
        """
        cdef char * type_proxy
        cdef char * particle_name_proxy
        cdef char * entity_type_proxy
        cdef char * entity_name_proxy
        type_bytes = type.encode()
        particle_name_bytes = particle_name.encode()
        entity_type_bytes = entity_type.encode()
        entity_name_bytes = entity_name.encode()
        self._inst = new cpp_tally.Tally(std_string(<char *> type_bytes), std_string(<char *> particle_name_bytes), <int> entity, std_string(<char *> entity_type_bytes), std_string(<char *> entity_name_bytes))
    
    
    _tally_tally_0_argtypes = frozenset()
    _tally_tally_1_argtypes = frozenset(((0, str), (1, str), (2, int), (3, str), (4, str), ("type", str), ("particle_name", str), ("entity", int), ("entity_type", str), ("entity_name", str)))
    
    def __init__(self, *args, **kwargs):
        """Tally(self, type, particle_name, entity, entity_type, entity_name)
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        empty constructor   there are no protected functions currently
        fool.
        
        Parameters
        ----------
        None
        
        Returns
        -------
        None
        
        ################################################################
        
        Constructor from passed in vars
        
        Parameters
        ----------
        particle_name : std::string
        
        entity_type : std::string
        
        type : std::string
        
        entity_name : std::string
        
        entity : int
        
        Returns
        -------
        None
        
        """
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.items()])
        # vtable-like dispatch for exactly matching types
        if types <= self._tally_tally_0_argtypes:
            self._tally_tally_0(*args, **kwargs)
            return
        if types <= self._tally_tally_1_argtypes:
            self._tally_tally_1(*args, **kwargs)
            return
        # duck-typed dispatch based on whatever works!
        try:
            self._tally_tally_0(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._tally_tally_1(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method __init__() could not be dispatched')
    
    def __dealloc__(self):
        if self._free_inst and self._inst is not NULL:
            free(self._inst)

    # attributes
    property entity_id:
        """no docstring for entity_id, please file a bug report!"""
        def __get__(self):
            return int((<cpp_tally.Tally *> self._inst).entity_id)
    
        def __set__(self, value):
            (<cpp_tally.Tally *> self._inst).entity_id = <int> value
    
    
    property entity_name:
        """no docstring for entity_name, please file a bug report!"""
        def __get__(self):
            return bytes(<char *> (<cpp_tally.Tally *> self._inst).entity_name.c_str()).decode()
    
        def __set__(self, value):
            cdef char * value_proxy
            value_bytes = value.encode()
            (<cpp_tally.Tally *> self._inst).entity_name = std_string(<char *> value_bytes)
    
    
    property entity_type:
        """no docstring for entity_type, please file a bug report!"""
        def __get__(self):
            return bytes(<char *> (<cpp_tally.Tally *> self._inst).entity_type.c_str()).decode()
    
        def __set__(self, value):
            cdef char * value_proxy
            value_bytes = value.encode()
            (<cpp_tally.Tally *> self._inst).entity_type = std_string(<char *> value_bytes)
    
    
    property particle_name:
        """no docstring for particle_name, please file a bug report!"""
        def __get__(self):
            return bytes(<char *> (<cpp_tally.Tally *> self._inst).particle_name.c_str()).decode()
    
        def __set__(self, value):
            cdef char * value_proxy
            value_bytes = value.encode()
            (<cpp_tally.Tally *> self._inst).particle_name = std_string(<char *> value_bytes)
    
    
    property tally_type:
        """no docstring for tally_type, please file a bug report!"""
        def __get__(self):
            return bytes(<char *> (<cpp_tally.Tally *> self._inst).tally_type.c_str()).decode()
    
        def __set__(self, value):
            cdef char * value_proxy
            value_bytes = value.encode()
            (<cpp_tally.Tally *> self._inst).tally_type = std_string(<char *> value_bytes)
    
    
    # methods
    

    pass






{'cpppxd_footer': '', 'pyx_header': '', 'pxd_header': '', 'pxd_footer': '', 'cpppxd_header': '', 'pyx_footer': ''}
