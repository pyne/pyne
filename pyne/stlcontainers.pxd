###################
###  WARNING!!! ###
###################
# This file has been autogenerated

# Cython imports
from libcpp.set cimport set as cpp_set
from libcpp.vector cimport vector as cpp_vector
from cython.operator cimport dereference as deref
from cython.operator cimport preincrement as inc
from libcpp.string cimport string as std_string
from libcpp.utility cimport pair
from libcpp.map cimport map as cpp_map
from libcpp.vector cimport vector as cpp_vector
from libc cimport stdio
from cpython.version cimport PY_MAJOR_VERSION
from cpython.ref cimport PyTypeObject, Py_INCREF, Py_XDECREF
from cpython.type cimport PyType_Ready
from cpython.object cimport PyObject
from cpython.object cimport Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE

# Python Imports
cimport numpy as np

# Local imports
cimport extra_types

cimport numpy as np

cdef extern from "Python.h":
    ctypedef Py_ssize_t Py_ssize_t

    cdef long Py_TPFLAGS_DEFAULT 
    cdef long Py_TPFLAGS_BASETYPE 
    cdef long Py_TPFLAGS_CHECKTYPES
    cdef long Py_TPFLAGS_HEAPTYPE

    ctypedef struct PyMemberDef:
        char * name

    ctypedef struct PyGetSetDef:
        char * name

    ctypedef struct PyTypeObject:
        char * tp_name
        int tp_basicsize
        int tp_itemsize
        object tp_alloc(PyTypeObject *, Py_ssize_t)
        void tp_dealloc(object)
        object tp_richcompare(object, object, int)
        object tp_new(PyTypeObject *, object, object)
        object tp_str(object)
        object tp_repr(object)
        long tp_hash(object)
        long tp_flags
        char * tp_doc
        PyMemberDef * tp_members
        PyGetSetDef * tp_getset
        PyTypeObject * tp_base
        void tp_free(void *)
        # This is a dirty hack by declaring to Cython both the Python 2 & 3 APIs
        int (*tp_compare)(object, object)      # Python 2
        void * (*tp_reserved)(object, object)  # Python 3

cdef extern from "numpy/arrayobject.h":

    ctypedef object (*PyArray_GetItemFunc)(void *, void *)
    ctypedef int (*PyArray_SetItemFunc)(object, void *, void *)
    ctypedef void (*PyArray_CopySwapNFunc)(void *, np.npy_intp, void *, np.npy_intp, np.npy_intp, int, void *)
    ctypedef void (*PyArray_CopySwapFunc)(void *, void *, int, void *)
    ctypedef int (*PyArray_CompareFunc)(const void* d1, const void *, void *)
    ctypedef int (*PyArray_ArgFunc)(void *, np.npy_intp, np.npy_intp *, void *)
    ctypedef void (*PyArray_DotFunc)(void *, np.npy_intp, void *, np.npy_intp, void *, np.npy_intp, void *)
    ctypedef int (*PyArray_ScanFunc)(stdio.FILE *, void *, void *, void *)
    ctypedef int (*PyArray_FromStrFunc)(char *, void *, char **, void *)
    ctypedef np.npy_bool (*PyArray_NonzeroFunc)(void *, void *)
    ctypedef void (*PyArray_FillFunc)(void *, np.npy_intp, void *)
    ctypedef void (*PyArray_FillWithScalarFunc)(void *, np.npy_intp, void *, void *)
    ctypedef int (*PyArray_SortFunc)(void *, np.npy_intp, void *)
    ctypedef int (*PyArray_ArgSortFunc)(void *, np.npy_intp *, np.npy_intp, void *)
    ctypedef np.NPY_SCALARKIND (*PyArray_ScalarKindFunc)(np.PyArrayObject *)

    ctypedef struct PyArray_ArrFuncs:
        np.PyArray_VectorUnaryFunc ** cast
        PyArray_GetItemFunc *getitem
        PyArray_SetItemFunc *setitem
        PyArray_CopySwapNFunc *copyswapn
        PyArray_CopySwapFunc *copyswap
        PyArray_CompareFunc *compare
        PyArray_ArgFunc *argmax
        PyArray_DotFunc *dotfunc
        PyArray_ScanFunc *scanfunc
        PyArray_FromStrFunc *fromstr
        PyArray_NonzeroFunc *nonzero
        PyArray_FillFunc *fill
        PyArray_FillWithScalarFunc *fillwithscalar
        PyArray_SortFunc *sort
        PyArray_ArgSortFunc *argsort
        PyObject *castdict
        PyArray_ScalarKindFunc *scalarkind
        int **cancastscalarkindto
        int *cancastto
        int listpickle

    cdef void PyArray_InitArrFuncs(PyArray_ArrFuncs *)

    ctypedef struct PyArray_ArrayDescr:
        PyArray_Descr * base
        PyObject  *shape

    cdef void ** PyArray_API

    cdef PyTypeObject * PyArrayDescr_Type
    
    ctypedef struct PyArray_Descr:
        Py_ssize_t ob_refcnt
        PyTypeObject * ob_type
        PyTypeObject * typeobj
        char kind
        char type
        char byteorder
        int flags
        int type_num
        int elsize
        int alignment
        PyArray_ArrayDescr * subarray
        PyObject * fields
        PyArray_ArrFuncs * f

    cdef int PyArray_RegisterDataType(PyArray_Descr *)

    cdef object PyArray_Scalar(void *, PyArray_Descr *, object)

cdef extern from "extra_types.h" namespace "extra_types":
    cdef cppclass MemoryKnight[T]:
        MemoryKnight() nogil except +
        T * defnew() nogil except +
        T * renew(void *) nogil except +
        void deall(T *) nogil except +

# SetStr
cdef class _SetIterStr(object):
    cdef cpp_set[std_string].iterator * iter_now
    cdef cpp_set[std_string].iterator * iter_end
    cdef void init(_SetIterStr, cpp_set[std_string] *)

cdef class _SetStr:
    cdef cpp_set[std_string] * set_ptr
    cdef public bint _free_set




# SetInt
cdef class _SetIterInt(object):
    cdef cpp_set[int].iterator * iter_now
    cdef cpp_set[int].iterator * iter_end
    cdef void init(_SetIterInt, cpp_set[int] *)

cdef class _SetInt:
    cdef cpp_set[int] * set_ptr
    cdef public bint _free_set




# MapStrStr
cdef class _MapIterStrStr(object):
    cdef cpp_map[std_string, std_string].iterator * iter_now
    cdef cpp_map[std_string, std_string].iterator * iter_end
    cdef void init(_MapIterStrStr, cpp_map[std_string, std_string] *)

cdef class _MapStrStr:
    cdef cpp_map[std_string, std_string] * map_ptr
    cdef public bint _free_map




# MapStrInt
cdef class _MapIterStrInt(object):
    cdef cpp_map[std_string, int].iterator * iter_now
    cdef cpp_map[std_string, int].iterator * iter_end
    cdef void init(_MapIterStrInt, cpp_map[std_string, int] *)

cdef class _MapStrInt:
    cdef cpp_map[std_string, int] * map_ptr
    cdef public bint _free_map




# MapIntStr
cdef class _MapIterIntStr(object):
    cdef cpp_map[int, std_string].iterator * iter_now
    cdef cpp_map[int, std_string].iterator * iter_end
    cdef void init(_MapIterIntStr, cpp_map[int, std_string] *)

cdef class _MapIntStr:
    cdef cpp_map[int, std_string] * map_ptr
    cdef public bint _free_map




# MapStrUInt
cdef class _MapIterStrUInt(object):
    cdef cpp_map[std_string, extra_types.uint32].iterator * iter_now
    cdef cpp_map[std_string, extra_types.uint32].iterator * iter_end
    cdef void init(_MapIterStrUInt, cpp_map[std_string, extra_types.uint32] *)

cdef class _MapStrUInt:
    cdef cpp_map[std_string, extra_types.uint32] * map_ptr
    cdef public bint _free_map




# MapUIntStr
cdef class _MapIterUIntStr(object):
    cdef cpp_map[extra_types.uint32, std_string].iterator * iter_now
    cdef cpp_map[extra_types.uint32, std_string].iterator * iter_end
    cdef void init(_MapIterUIntStr, cpp_map[extra_types.uint32, std_string] *)

cdef class _MapUIntStr:
    cdef cpp_map[extra_types.uint32, std_string] * map_ptr
    cdef public bint _free_map




# MapStrDouble
cdef class _MapIterStrDouble(object):
    cdef cpp_map[std_string, double].iterator * iter_now
    cdef cpp_map[std_string, double].iterator * iter_end
    cdef void init(_MapIterStrDouble, cpp_map[std_string, double] *)

cdef class _MapStrDouble:
    cdef cpp_map[std_string, double] * map_ptr
    cdef public bint _free_map




# MapUIntUInt
cdef class _MapIterUIntUInt(object):
    cdef cpp_map[extra_types.uint32, extra_types.uint32].iterator * iter_now
    cdef cpp_map[extra_types.uint32, extra_types.uint32].iterator * iter_end
    cdef void init(_MapIterUIntUInt, cpp_map[extra_types.uint32, extra_types.uint32] *)

cdef class _MapUIntUInt:
    cdef cpp_map[extra_types.uint32, extra_types.uint32] * map_ptr
    cdef public bint _free_map




# MapIntInt
cdef class _MapIterIntInt(object):
    cdef cpp_map[int, int].iterator * iter_now
    cdef cpp_map[int, int].iterator * iter_end
    cdef void init(_MapIterIntInt, cpp_map[int, int] *)

cdef class _MapIntInt:
    cdef cpp_map[int, int] * map_ptr
    cdef public bint _free_map




# MapIntDouble
cdef class _MapIterIntDouble(object):
    cdef cpp_map[int, double].iterator * iter_now
    cdef cpp_map[int, double].iterator * iter_end
    cdef void init(_MapIterIntDouble, cpp_map[int, double] *)

cdef class _MapIntDouble:
    cdef cpp_map[int, double] * map_ptr
    cdef public bint _free_map




# MapIntComplex
cdef class _MapIterIntComplex(object):
    cdef cpp_map[int, extra_types.complex_t].iterator * iter_now
    cdef cpp_map[int, extra_types.complex_t].iterator * iter_end
    cdef void init(_MapIterIntComplex, cpp_map[int, extra_types.complex_t] *)

cdef class _MapIntComplex:
    cdef cpp_map[int, extra_types.complex_t] * map_ptr
    cdef public bint _free_map




# MapUIntDouble
cdef class _MapIterUIntDouble(object):
    cdef cpp_map[extra_types.uint32, double].iterator * iter_now
    cdef cpp_map[extra_types.uint32, double].iterator * iter_end
    cdef void init(_MapIterUIntDouble, cpp_map[extra_types.uint32, double] *)

cdef class _MapUIntDouble:
    cdef cpp_map[extra_types.uint32, double] * map_ptr
    cdef public bint _free_map




# MapStrVectorDouble
cdef class _MapIterStrVectorDouble(object):
    cdef cpp_map[std_string, cpp_vector[double]].iterator * iter_now
    cdef cpp_map[std_string, cpp_vector[double]].iterator * iter_end
    cdef void init(_MapIterStrVectorDouble, cpp_map[std_string, cpp_vector[double]] *)

cdef class _MapStrVectorDouble:
    cdef cpp_map[std_string, cpp_vector[double]] * map_ptr
    cdef public bint _free_map




# MapIntVectorDouble
cdef class _MapIterIntVectorDouble(object):
    cdef cpp_map[int, cpp_vector[double]].iterator * iter_now
    cdef cpp_map[int, cpp_vector[double]].iterator * iter_end
    cdef void init(_MapIterIntVectorDouble, cpp_map[int, cpp_vector[double]] *)

cdef class _MapIntVectorDouble:
    cdef cpp_map[int, cpp_vector[double]] * map_ptr
    cdef public bint _free_map




