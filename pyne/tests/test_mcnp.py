"""PyNE MCNP tools tests"""
import os
import unittest
import nose

import nose.tools

from pyne import mcnp

thisdir = os.path.dirname(__file__)
ssrname = os.path.join(thisdir,"mcnp_surfsrc.w")
sswname = os.path.join(thisdir,"copy_mcnp_surfsrc.w")
ssrname_onetrack = os.path.join(thisdir,"mcnp_surfsrc_onetrack.w")

class TestInp(unittest.TestCase):
    """
    """
    def setUp(self):
        # Do NOT set self.inpname to something like '/', as there is a
        # recursive deletion of this directory in self.tearDown().
        self.inpname = 'testingInp'
        """Runs mcnp.Inp.example_infinitelattice and makes sure the generated
        input file matches the expected output.

        """
        self.inp1 = mcnp.Inp.example_infinitelattice(inpname=self.inpname,
                printmsg=False)

    def tearDown(self):
        """Deletes the output (input file) generated by the mcnp.Inp example.

        """
        for root, dirs, files in os.walk(self.inpname, topdown=False):
            for name in files:
                os.remove(os.path.join(root, name))
            for name in dirs:
                os.rmdir(os.path.join(root, name))
        os.rmdir(self.inpname)

    def test_basic(self):
        """Brute-force test that the generated input file matches the expected
        output for all cards in the Inp.example_infinitelattice example.

        """
        # Test cell cards.
        # Fuel cell.
        self.assertEquals(self.inp1.cells['UOX pin'].card(),
                '1   1  -1.1000e+01 -1    IMP:N=1 TMP=5.1704e-08 ' +
                'VOL=5.0265e-01$ UOX pin')
        # Moderator cell.
        self.assertEquals(self.inp1.cells['moderator'].card(),
                '2   2  -1.0000e+00  1 -2 IMP:N=1 TMP=2.5852e-08 ' +
                'VOL=9.3735e-01$ moderator')
        # No man's land.
        self.assertEquals(self.inp1.cells['Problem boundary'].card(),
                '3   0               2    IMP:N=0                       ' +
                '$ Problem boundary')
        # Test surface cards.
        # Pin boundary.
        self.assertEquals(self.inp1.surfaces['pin'].card(),
                '1   CZ  0.4000                ' +
                '$ Infinite cylinder along z axis, radius 0.4 cm')
        # Problem boundary, rectangular parallelepiped.
        self.assertEquals(self.inp1.surfaces['cellbound'].card(),
                '*2  RPP -0.6000 0.6000 -0.6000 0.6000 0.0000 0.0000  ' +
                '$ Rectangular parallelepiped: [-0.6, 0.6] x [-0.6, 0.6] ' +
                'x [0, 0] cm')
        # Test material cards.
        # UOX material.
        self.assertEquals(self.inp1.materials['UOX'].card(),
                'M1         8016.71c  2.000000e+00\n' +
                '          92235.71c  5.000000e-02\n' +
                '          92238.71c  9.500000e-01\n')
        # H2O material.
        self.assertEquals(self.inp1.materials['H2O'].card(),
                'M2         1001.70c  2.000000e+00\n' +
                '           8016.70c  1.000000e+00\n')
        # Scattering law (MT) for hydrogen in water, H2O material.
        self.assertEquals(self.inp1.scattering_laws['H2O'].card(),
                'MT2 lwtr')
        # Test data cards.
        # Criticality source.
        self.assertEquals(self.inp1.source.card(),
                'KCODE  1000  1.0  30  130')
        # The source points for the criticality source.
        self.assertEquals(self.inp1.source_points.card(),
                'KSRC  0 0 0')
        # Tally for cell flux in the fuel, 'UOX pin' cell (cell 1).
        self.assertEquals(self.inp1.tallies['fuel spectrum'].card(),
                'F14:N 1')
        # Tally for cell flux in the moderator, 'moderator' cell (cell 2).
        self.assertEquals(self.inp1.tallies['moderator spectrum'].card(),
                'F24:N 2')
        # Tally multipliers for both tallies.
        self.assertEquals(self.inp1.miscdata[1].card(),
                'FM14  (1)\n' +
                '     (-1 1 (1) (2) (18) (102))')
        self.assertEquals(self.inp1.miscdata[2].card(),
                'FM24  (1)\n' +
                '     (-1 2 (1) (2) (18) (102))')
        self.assertEquals(self.inp1.miscdata[3].card(),
                'PRDMP 0 0 1')
        # Energy bins for the tallies.
        # TODO I actually want to test the wrapping feature, not just the card
        # output.
        self.assertEquals(self.inp1.miscdata[0].card(),
       'E0   1.25893e-10  1.58489e-10  1.99526e-10  2.51189e-10  ' +
            '3.16228e-10  ' +
            '3.98107e-10  5.01187e-10  6.30957e-10  7.94328e-10  ' +
            '1.00000e-09  ' +
            '1.25893e-09  1.58489e-09  1.99526e-09  2.51189e-09  ' +
            '3.16228e-09  ' +
            '3.98107e-09  5.01187e-09  6.30957e-09  7.94328e-09  ' +
            '1.00000e-08  ' +
            '1.25893e-08  1.58489e-08  1.99526e-08  2.51189e-08  ' +
            '3.16228e-08  ' +
            '3.98107e-08  5.01187e-08  6.30957e-08  7.94328e-08  ' +
            '1.00000e-07  ' +
            '1.25893e-07  1.58489e-07  1.99526e-07  2.51189e-07  ' +
            '3.16228e-07  ' +
            '3.98107e-07  5.01187e-07  6.30957e-07  7.94328e-07  ' +
            '1.00000e-06  ' +
            '1.25893e-06  1.58489e-06  1.99526e-06  2.51189e-06  ' +
            '3.16228e-06  ' +
            '3.98107e-06  5.01187e-06  6.30957e-06  7.94328e-06  ' +
            '1.00000e-05  ' +
            '1.25893e-05  1.58489e-05  1.99526e-05  2.51189e-05  ' +
            '3.16228e-05  ' +
            '3.98107e-05  5.01187e-05  6.30957e-05  7.94328e-05  ' +
            '1.00000e-04  ' +
            '1.25893e-04  1.58489e-04  1.99526e-04  2.51189e-04  ' +
            '3.16228e-04  ' +
            '3.98107e-04  5.01187e-04  6.30957e-04  7.94328e-04  ' +
            '1.00000e-03  ' +
            '1.25893e-03  1.58489e-03  1.99526e-03  2.51189e-03  ' +
            '3.16228e-03  ' +
            '3.98107e-03  5.01187e-03  6.30957e-03  7.94328e-03  ' +
            '1.00000e-02  ' +
            '1.25893e-02  1.58489e-02  1.99526e-02  2.51189e-02  ' +
            '3.16228e-02  ' +
            '3.98107e-02  5.01187e-02  6.30957e-02  7.94328e-02  ' +
            '1.00000e-01  ' +
            '1.25893e-01  1.58489e-01  1.99526e-01  2.51189e-01  ' +
            '3.16228e-01  ' +
            '3.98107e-01  5.01187e-01  6.30957e-01  7.94328e-01  ' +
            '1.00000e+00  ' +
            '1.25893e+00  1.58489e+00  1.99526e+00  2.51189e+00  ' +
            '3.16228e+00  ' +
            '3.98107e+00  5.01187e+00  6.30957e+00  7.94328e+00  ' +
            '1.00000e+01')

    def test_inputexceptions(self):
        """Ensure that all exceptions generated by incorrect user input are
        functional.

        """

    def test_mcnpcomments(self):
        """Ensure that MCNPX comments (on their own line beginning with 'c' or
        'C', or in-line beginning with '$') are functional.

        """

    def test_syntax(self):
        """Ensure that syntax is obeyed (less than 80 characters per
        line, comments, more than 5 spaces for line continuation, etc.)

        """

    def test_autonumbering(self):
        """Ensure that auto-numbering of cell, surface, material, tally, and
        other cards is correct.

        """

    def test_namereferencing(self):
        """For all types of cards where name references are used to other cards,
        make sure the correct card number is used.

        """


# Test methods for the SurfSrc class
class TestSurfSrc(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_read_header_block(self):
        """Test the read_header() method in the SurfSrc class
        We compare the SurfSrc object variables with expected values from the
        file 'mcnp_surfsrc.w'.
        """
        ssr = mcnp.SurfSrc(ssrname, 'rb')
        ssr.read_header()

        # header record values
        self.assertEqual(ssr.kod   , "mcnp    ")
        self.assertEqual(ssr.ver   , "5    ")
        self.assertEqual(ssr.loddat, "01232009")
        self.assertEqual(ssr.idtm  , " 10/31/11 13:52:39 ")
        self.assertEqual(ssr.probid, " 10/31/11 13:52:35 ")
        self.assertEqual(ssr.aid   , "c Test deck with H20 cube, point n source, SSW of top surface interactions      ")
        self.assertEqual(ssr.knod  , 2)
        # table 1 record values
        self.assertEqual(ssr.np1   , 1000)
        self.assertEqual(ssr.nrss  , 173)
        self.assertEqual(ssr.ncrd  , 11)
        self.assertEqual(ssr.njsw  , 1)
        self.assertEqual(ssr.niss  , 173)
        # table 2 record values
        self.assertEqual(ssr.niwr  , 0)
        self.assertEqual(ssr.mipts , 3)
        self.assertEqual(ssr.kjaq  , 0)
        
    def test_compare(self):
        """Test the compare() method in the SurfSrc class
        Tricky to test... this just verifies that comparisons are done right.
        """
        ssrA = mcnp.SurfSrc(ssrname, 'rb')
        ssrB = mcnp.SurfSrc(ssrname, 'rb')
        ssrA.read_header()
        ssrB.read_header()
        self.assertTrue(ssrA.compare(ssrB))
        ssrA.close()
        ssrB.close()

    def test_put_header_block(self):
        """We copy the header block, write to new file, re-read, and compare.
        This tests that information is preserved correctly when written.
        """
        ssr = mcnp.SurfSrc(ssrname, "rb")
        ssw = mcnp.SurfSrc(sswname, "wb")
        ssr.read_header()

        # header record values
        ssw.kod    = ssr.kod
        ssw.ver    = ssr.ver
        ssw.loddat = ssr.loddat
        ssw.idtm   = ssr.idtm
        ssw.probid = ssr.probid
        ssw.aid    = ssr.aid
        ssw.knod   = ssr.knod
        # table 1 record values
        ssw.np1    = ssr.orignp1  # ssr.np1
        ssw.nrss   = ssr.nrss  
        ssw.ncrd   = ssr.ncrd
        ssw.njsw   = ssr.njsw
        ssw.niss   = ssr.niss
        # table 2 record values
        ssw.niwr   = ssr.niwr
        ssw.mipts  = ssr.mipts
        ssw.kjaq   = ssr.kjaq
        ssw.table2extra = ssr.table2extra
        # surface info record list
        ssw.surflist     = ssr.surflist
        # summary table record values
        ssw.summaryTable = ssr.summaryTable
        ssw.summaryExtra = ssr.summaryExtra

        ssw.put_header()
        ssw.put_table_1()
        ssw.put_table_2()
        ssw.put_surface_info()
        ssw.put_summary()
        ssw.close()

        sswr = mcnp.SurfSrc(sswname, "rb")
        sswr.read_header()
        
        self.assertEqual(ssr.print_header(), sswr.print_header())
        
        ssr.close()
        sswr.close()
        
        os.system("rm -f " + sswname)

        return

    def test_read_tracklist(self):
        """We read in tracklists and compare with known values.
        We use a file with a single track for this test.
        """
        ssr = mcnp.SurfSrc(ssrname_onetrack, "rb")
        ssr.read_header()
        ssr.read_tracklist()

        # print "Length: " + str(len(ssr.tracklist))
        for trackData in ssr.tracklist:
            # Should only be one trackData in tracklist
            # trackData.record is skipped; contains the below components.
            # self.assertEqual(trackData.record  , 0) 
            self.assertEqual(trackData.nps     , 1) 
            self.assertAlmostEqual(trackData.bitarray, 8.000048e+06) 
            self.assertAlmostEqual(trackData.wgt     , 0.99995639) 
            self.assertAlmostEqual(trackData.erg     , 5.54203947) 
            self.assertAlmostEqual(trackData.tme     , 0.17144023) 
            self.assertAlmostEqual(trackData.x       , -8.05902e-02) 
            self.assertAlmostEqual(trackData.y       , 3.122666098e+00) 
            self.assertAlmostEqual(trackData.z       , 5.00000e+00) 
            self.assertAlmostEqual(trackData.u       , -0.35133163) 
            self.assertAlmostEqual(trackData.v       , 0.48465036) 
            self.assertAlmostEqual(trackData.cs      , 0.80104937) 
            self.assertAlmostEqual(trackData.w       , 0.80104937) 
        return

    def test_print_tracklist(self):
        """Check SurfSrc.print_tracklist() against expected resulting string.
        We use a file with a single track for this test.
        """
        ssr = mcnp.SurfSrc(ssrname_onetrack, "rb")
        ssr.read_header()
        ssr.read_tracklist()
        # If this needs to be updated, uncomment the below
        #  and do: nosetests test_mcnp.py -v
        # print ssr.print_tracklist()
        self.assertEqual(ssr.print_tracklist(), 'Track Data\n       nps   BITARRAY        WGT        ERG        TME             X             Y             Z          U          V     COSINE  |       W\n         1 8.00005e+06    0.99996      5.542    0.17144  -8.05902e-02   3.12267e+00   5.00000e+00   -0.35133    0.48465    0.80105  |    0.80105 \n')
        return
