name: Quick Wheel test

on:
  # allows running workflows manually
  workflow_dispatch:

  pull_request:
    branches:
      - develop
    paths-ignore:
      - docs/**

  push:
    branches:
      - develop
    paths-ignore:
      - docs/**

jobs:
  main:
    strategy:
      matrix:
        os: [windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Checkout PyNE
        uses: actions/checkout@v3

      - name: Install Venv Ubuntu
        run: |
          sudo apt-get install -y python3-venv
          python -m venv $GITHUB_WORKSPACE/env
          source $GITHUB_WORKSPACE/env/bin/activate
          ls -a $GITHUB_WORKSPACE
        if: matrix.os == 'ubuntu-latest'

      - name: Install HDF5 Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran libblas-dev liblapack-dev libeigen3-dev libhdf5-dev hdf5-tools
          # hdf5 std directory
          export HDF5_ROOT=/usr/lib/x86_64-linux-gnu/hdf5/serial
          export LD_LIBRARY_PATH="${HDF5_ROOT}:$GITHUB_WORKSPACE/env/lib"
        if: matrix.os == 'ubuntu-latest'

      - name: Install Miniconda Windows
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""
        if: matrix.os == 'windows-latest'

      - name: Install Python Packages
        run: |
          python -m pip install wheel
          python -m pip install "cython<3" numpy build pytest

      - name: Install HDF5 and Eigen Windows
        run: |
          conda install curl eigen
          conda install -c conda-forge hdf5
          conda remove -y yaml-cpp
          Add-Content -Path $env:GITHUB_ENV -Value "HOME_PATH=$env:GITHUB_WORKSPACE\.."
          Add-Content -Path $env:GITHUB_ENV -Value "CONDA_LOC=C:\Miniconda\Library"
          Add-Content -Path $env:GITHUB_ENV -Value "EIGEN3_DIR=C:\Miniconda\Library\"
        if: matrix.os == 'windows-latest'

      - name: Install HDF5 and Eigen MacOS
        shell: bash -l {0}
        run: |
          brew install hdf5 eigen
          echo "HOME=$GITHUB_WORKSPACE/.." >> $GITHUB_ENV
          echo "HDF5_ROOT=$HDF5_PATH" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest'

      - name: Install MOAB Ubuntu
        run: |
          cd $GITHUB_WORKSPACE
          # clone and version
          git clone --depth 1 https://bitbucket.org/fathomteam/moab -b 5.3.0
          cd moab
          mkdir -p build
          cd build
          # cmake, build and install
            cmake ../ -DENABLE_HDF5=ON \
              -DHDF5_ROOT=$HDF5_ROOT \
              -DBUILD_SHARED_LIBS=ON \
              -DENABLE_PYMOAB=ON \
              -DENABLE_BLASLAPACK=OFF \
              -DENABLE_FORTRAN=OFF \
              -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/env
            make
            make install
          cd $GITHUB_WORKSPACE
          rm -rf $GITHUB_WORKSPACE/moab
          echo "MOAB_ROOT=$GITHUB_WORKSPACE/env" >> $GITHUB_ENV
          echo "MOAB installed"
        if: matrix.os == 'ubuntu-latest'

      - name: Install MOAB Windows
        run: |
          Set-Location $Env:GITHUB_WORKSPACE
          # clone and version
          git clone --depth 1 https://bitbucket.org/fathomteam/moab -b 5.3.0
          Set-Location moab
          New-Item -ItemType Directory -Force -Path build
          Set-Location build
          # cmake, build, and install
          cmake ../ -G "Visual Studio 17 2022" `
            -DCMAKE_INSTALL_PREFIX="$Env:CONDA_LOC" `
            -DCMAKE_EXE_LINKER_FLAGS="/std:c++latest -DH5_BUILT_AS_DYNAMIC_LIB" `
            -DCMAKE_MODULE_LINKER_FLAGS="/std:c++latest" `
            -DCMAKE_SHARED_LINKER_FLAGS="/std:c++latest" `
            -DCMAKE_STATIC_LINKER_FLAGS="" `
            -DENABLE_HDF5=ON `
            -DHDF5_ROOT="$Env:CONDA_LOC" `
            -DHDF5_hdf5_LIBRARY_RELEASE="$Env:CONDA_LOC\lib\libhdf5_hl.lib;$Env:CONDA_LOC\lib\libhdf5.lib;$Env:CONDA_LOC\lib\zlib.lib;$Env:CONDA_LOC\lib\libhdf5_cpp.lib" `
            -DBUILD_SHARED_LIBS=ON `
            -DENABLE_PYMOAB=ON `
            -DENABLE_IMESH=OFF `
            -DENABLE_TESTING=OFF `
            -DENABLE_BLASLAPACK=OFF `
            -DENABLE_FORTRAN=OFF `
            -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          cmake --install .
          Set-Location $Env:GITHUB_WORKSPACE
          Remove-Item -Force -Recurse moab
          Add-Content -Path $env:GITHUB_ENV -Value "MOAB_ROOT=$Env:CONDA_LOC\"
          Write-Host "MOAB installed"
        if: matrix.os == 'windows-latest'

      - name: Install DAGMC Ubuntu
        run: |
          cd $GITHUB_WORKSPACE
          # clone the repository
          git clone https://github.com/ahnaf-tahmid-chowdhury/DAGMC.git dagmc
          cd dagmc
          mkdir -p build
          cd build
          # cmake, build and install
          cmake ../ -DMOAB_CMAKE_CONFIG=$GITHUB_WORKSPACE/env/lib/cmake/MOAB \
            -DMOAB_DIR=$GITHUB_WORKSPACE/env \
            -DBUILD_STATIC_LIBS=OFF \
            -DBUILD_TALLY=ON \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/env
          make
          make install
          cd $GITHUB_WORKSPACE
          rm -rf "$GITHUB_WORKSPACE/dagmc"
          echo "DAGMC_ROOT=$GITHUB_WORKSPACE/env" >> $GITHUB_ENV
          echo "DAGMC installed"
        if: matrix.os == 'ubuntu-latest'

      - name: Install DAGMC Windows
        run: |
          Set-Location $Env:GITHUB_WORKSPACE
          # clone the repository
          git clone https://github.com/ahnaf-tahmid-chowdhury/DAGMC.git dagmc
          Set-Location dagmc
          New-Item -ItemType Directory -Force -Path build
          Set-Location build
          # cmake, build, and install
          cmake ../  -G "Visual Studio 17 2022" `
            -DCMAKE_INSTALL_PREFIX="$Env:CONDA_LOC" `
            -DBUILD_EXE=ON `
            -DBUILD_STATIC_EXE=ON `
            -DBUILD_SHARED_LIBS=OFF `
            -DBUILD_STATIC_LIBS=ON `
            -DBUILD_TALLY=OFF `
            -DBUILD_BUILD_OBB=OFF `
            -DBUILD_UWUW=ON `
            -DBUILD_MAKE_WATERTIGHT=ON `
            -DBUILD_OVERLAP_CHECK=OFF `
            -DBUILD_TESTS=OFF `
            -DMOAB_DIR="C:/Miniconda/Library/" `
            -DMOAB_CMAKE_CONFIG="$Env:CONDA_LOC\lib\cmake\MOAB" `
            -DHDF5_ROOT="$Env:CONDA_LOC" `
            -DHDF5_hdf5_LIBRARY_RELEASE="$Env:CONDA_LOC\lib\libhdf5_hl.lib;$Env:CONDA_LOC\lib\libhdf5.lib;$Env:CONDA_LOC\lib\zlib.lib;$Env:CONDA_LOC\lib\libhdf5_cpp.lib" `
            -DCMAKE_EXE_LINKER_FLAGS="" `
            -DCMAKE_MODULE_LINKER_FLAGS="" `
            -DCMAKE_SHARED_LINKER_FLAGS="" `
            -DCMAKE_STATIC_LINKER_FLAGS="" `
            -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          cmake --install .
          Set-Location $Env:GITHUB_WORKSPACE
          Remove-Item -Force -Recurse "dagmc"
          Add-Content -Path $env:GITHUB_ENV -Value "DAGMC_ROOT=$Env:CONDA_LOC\"
          Write-Host "DAGMC installed"
        if: matrix.os == 'windows-latest'

      - name: Build wheels
        run: |
          python -m build --wheel

      - name: Install PyNE
        run: |
          python -m pip install dist/pyne*.whl
          nuc_data_make

      - name: Test PyNE
        run: |
          cd tests
          pytest -ra ../tests
