name: Quick Wheel test

on:
  # allows running workflows manually
  workflow_dispatch:

  pull_request:
    branches:
      - develop
    paths-ignore:
      - docs/**

  push:
    branches:
      - develop
    paths-ignore:
      - docs/**

jobs:
  main:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install hdf5 Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran libblas-dev liblapack-dev libeigen3-dev libhdf5-dev hdf5-tools
          # hdf5 std directory
          hdf5_libdir=/usr/lib/x86_64-linux-gnu/hdf5/serial
          # need to put libhdf5.so on LD_LIBRARY_PATH
          if [ -z $LD_LIBRARY_PATH ]; then
            export LD_LIBRARY_PATH="${hdf5_libdir}:$GITHUB_WORKSPACE/lib"
          else
            export LD_LIBRARY_PATH="${hdf5_libdir}:$GITHUB_WORKSPACE/lib:$LD_LIBRARY_PATH"
          fi
        if: matrix.os == 'ubuntu-latest'

      - name: Install Miniconda Windows
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""
        if: matrix.os == 'windows-2019'

      - name: Install Python Packages
        shell: bash -l {0}
        run: |
          python -m pip install "cython<3" numpy build pytest

      - name: Install hdf5 Windows
        shell: bash -l {0}
        run: |
          conda install curl eigen
          conda install -c conda-forge hdf5
          conda remove -y yaml-cpp
          echo "HOME_PATH=$GITHUB_WORKSPACE/.." >> $GITHUB_ENV
          echo "CONDA_LOC=C:/Miniconda/Library" >> $GITHUB_ENV
          echo "hdf5_libdir=C:/Miniconda/Library" >> $GITHUB_ENV
          echo "EIGEN3_DIR=C:/Miniconda/Library/" >> $GITHUB_ENV
        if: matrix.os == 'windows-2019'

      - name: Install hdf5 MacOS
        shell: bash -l {0}
        run: |
          brew install hdf5 eigen
          echo "HOME=$GITHUB_WORKSPACE/.." >> $GITHUB_ENV
          hdf5_libdir=$HDF5_PATH
        if: matrix.os == 'macos-latest'

      - name: Install MOAB
        shell: bash -l {0}
        run: |
          cd $GITHUB_WORKSPACE
          # clone and version
          git clone --depth 1 https://bitbucket.org/fathomteam/moab -b 5.3.0
          cd moab
          mkdir -p build
          cd build
          # cmake, build and install
          if [ $matrix.os == 'windows-latest' ]; then
            cmake ../moab -DENABLE_BLASLAPACK=OFF \
              -DENABLE_FORTRAN=OFF \
              -DENABLE_IMESH=OFF \
              -DENABLE_TESTING=OFF \
              -DENABLE_HDF5=ON \
              -DBUILD_SHARED_LIBS=ON \
              -G"Visual Studio 16 2019"  \
              -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE \
              -DHDF5_ROOT="${CONDA_LOC}" \
              -DHDF5_hdf5_LIBRARY_RELEASE="${CONDA_LOC}/lib/libhdf5_hl.lib;${CONDA_LOC}/lib/libhdf5.lib;${CONDA_LOC}/lib/zlib.lib;${CONDA_LOC}/lib/libhdf5_cpp.lib" \
              -DCMAKE_EXE_LINKER_FLAGS="/std:c++latest -DH5_BUILT_AS_DYNAMIC_LIB" \
              -DCMAKE_MODULE_LINKER_FLAGS="/std:c++latest" \
              -DCMAKE_SHARED_LINKER_FLAGS="/std:c++latest" \
              -DCMAKE_STATIC_LINKER_FLAGS="" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER="C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe" \
              -DCMAKE_CXX_COMPILER="C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe"
            cmake --build . --config Release
            cmake --install . --config Release
          else
            cmake ../ -DENABLE_HDF5=ON \
              -DHDF5_ROOT=$hdf5_libdir \
              -DBUILD_SHARED_LIBS=ON \
              -DENABLE_PYMOAB=ON \
              -DENABLE_BLASLAPACK=OFF \
              -DENABLE_FORTRAN=OFF \
              -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE
            make
            make install
          fi
          cd $GITHUB_WORKSPACE
          # Remove the temporary directory
          rm -rf $GITHUB_WORKSPACE/moab
          echo "MOAB installed"
      - name: Install DAGMC
        shell: bash -l {0}
        run: |
          cd $GITHUB_WORKSPACE
          # clone the repository
          git clone https://github.com/ahnaf-tahmid-chowdhury/DAGMC.git
          cd dagmc
          mkdir -p build
          cd build
          # cmake, build and install
          if [ $matrix.os == 'windows-2019' ]; then
            cmake ../ -G"Visual Studio 16 2019" \
              -DBUILD_EXE=ON \
              -DBUILD_STATIC_EXE=ON \
              -DBUILD_SHARED_LIBS=OFF \
              -DBUILD_STATIC_LIBS=ON \
              -DBUILD_TALLY=OFF \
              -DBUILD_BUILD_OBB=OFF \
              -DBUILD_UWUW=ON \
              -DBUILD_MAKE_WATERTIGHT=ON \
              -DBUILD_OVERLAP_CHECK=OFF \
              -DBUILD_TESTS=ON \
              -DMOAB_DIR=../install_dir \
              -DHDF5_ROOT="${CONDA_LOC}" \
              -DHDF5_hdf5_LIBRARY_RELEASE="${CONDA_LOC}/lib/libhdf5_hl.lib;${CONDA_LOC}/lib/libhdf5.lib;${CONDA_LOC}/lib/zlib.lib;${CONDA_LOC}/lib/libhdf5_cpp.lib" \
              -DCMAKE_INSTALL_PREFIX=../install_dir/ \
              -DCMAKE_EXE_LINKER_FLAGS="" \
              -DCMAKE_MODULE_LINKER_FLAGS="" \
              -DCMAKE_SHARED_LINKER_FLAGS="" \
              -DCMAKE_STATIC_LINKER_FLAGS="" \
              -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release
            cmake --install . --config Release
          else
            cmake ../ -DMOAB_CMAKE_CONFIG=$GITHUB_WORKSPACE/lib/cmake/MOAB \
              -DMOAB_DIR=$GITHUB_WORKSPACE \
              -DBUILD_STATIC_LIBS=OFF \
              -DBUILD_TALLY=ON \
              -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE
            make
            make install
          fi
          cd $GITHUB_WORKSPACE
          # Remove the temporary directory
          rm -rf "$GITHUB_WORKSPACE/dagmc"
          echo "DAGMC installed"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build wheels
        shell: bash -l {0}
        run: |
          export MOAB_ROOT=$GITHUB_WORKSPACE
          export DAGMC_ROOT=$GITHUB_WORKSPACE
          python -m build --wheel

      - name: Install PyNE
        shell: bash -l {0}
        run: |
          python -m pip install dist/pyne*.whl
          nuc_data_make

      - name: Test PyNE
        shell: bash -l {0}  
        run: cd tests && ./ci-run-tests.sh
