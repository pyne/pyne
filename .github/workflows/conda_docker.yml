name: Build & Publish Conda docker image for PyNE-CI

on:
  # allows us to run workflows manually
  workflow_dispatch:
  pull_request:
    paths:
      - 'docker/*'
      - '.github/workflows/conda_docker.yml'
  push:
    paths:
      - 'docker/*'
      - '.github/workflows/conda_docker.yml'

env:
  DOCKER_IMAGE_BASENAME: ghcr.io/${{ github.repository_owner }}/pyne_ubuntu_22.04_py3_conda
  USE_LATEST_TAG: false

jobs:
  # builds and pushes docker images of various stages to ghcr.
  # These docker images are also stored in ghcr and can be pulled
  # to be built upon by the subsequent stage.
  multistage_image_build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Tag images with latest if on the main repo's develop branch
        if: github.repository_owner == 'pyne' && github.ref_name == 'develop'
        run: echo "USE_LATEST_TAG=true" >> $GITHUB_ENV

      # build pyne-deps stage using multistage docker build action
      - uses: firehed/multistage-docker-build-action@v1
        id: build_all_stages
        with:
          repository: ${{ env.DOCKER_IMAGE_BASENAME }}
          stages: pyne-deps
          server-stage: pyne-deps
          quiet: false
          parallel: true
          tag-latest-on-default: ${{ env.USE_LATEST_TAG }}
          dockerfile: docker/conda_build.dockerfile

  # Downloads the images uploaded to ghcr in previous stages and runs pyne
  # tests to check that they work.
  BuildTest:
    needs: [multistage_image_build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Tag images with latest if on the main repo's develop branch
        if: github.repository_owner == 'pyne' && github.ref_name == 'develop'
        run: echo "USE_LATEST_TAG=true" >> $GITHUB_ENV

      # build test stage and pyne stage using multistage docker build action
      - uses: firehed/multistage-docker-build-action@v1
        id: multistage_build_and_test
        with:
          repository: ${{ env.DOCKER_IMAGE_BASENAME }}
          stages: pyne-deps
          server-stage: pyne
          quiet: false
          parallel: true
          tag-latest-on-default: ${{ env.USE_LATEST_TAG }}
          dockerfile: docker/conda_build.dockerfile

  # if the previous step that tests the docker images passes, then the images
  # can be copied from the ghcr where they are saved using :ci_testing tags to
  # :latest and :stable tags.
  pushing_test_stable_img:
    if: github.repository_owner == 'pyne' && github.ref_name == 'develop'
    needs: [BuildTest]
    runs-on: ubuntu-latest

    name: "ghcr.io/${{ github.repository_owner }}/pyne_ubuntu_22.04_py3_conda/pyne-deps: latest -> stable"

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image to stable img
        uses: akhilerm/tag-push-action@v2.1.0
        with:
          src: ${{ env.DOCKER_IMAGE_BASENAME }}/pyne-deps:latest
          dst: ${{ env.DOCKER_IMAGE_BASENAME }}/pyne-deps:stable