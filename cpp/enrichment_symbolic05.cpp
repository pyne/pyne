 
/*********************************************************/
/***            Symbolic Enrichment Functions          ***/
/*** WARNING: This file is auto-generated.             ***/
/***                  DO NOT MODIFY!!!                 ***/
/*********************************************************/
#include "enrichment_symbolic.h"

pyne::enrichment::Cascade pyne::enrichment::solve_symbolic(pyne::enrichment::Cascade & orig_casc)
{
  pyne::enrichment::Cascade casc = orig_casc;
  int j = casc.j;
  int k = casc.k;
  double alpha = casc.alpha;
  double NP0 = casc.N;
  //double NT0 = casc.M;
  double Mstar = casc.Mstar;
  double xPj = casc.x_prod_j;
  //double xFj = casc.x_feed_j;
  double xTj = casc.x_tail_j;
  int ncomp = casc.mat_feed.comp.size();
  double LpF = -1.0, PpF = -1.0, TpF = -1.0, 
         SWUpF = -1.0, SWUpP = -1.0, 
         NP_b = -1.0, NP_sqrt_base = -1.0, NP_2a = -1.0, 
         NP1 = -1.0, NT1 = -1.0;
  double * MW = new double [ncomp];
  double * xP = new double [ncomp];
  double * xF = new double [ncomp];
  double * xT = new double [ncomp];
  double n38 = 0.0,
         n39 = 0.0,
         n30 = 0.0,
         n31 = 0.0,
         n32 = 0.0,
         n33 = 0.0,
         n34 = 0.0,
         n35 = 0.0,
         n36 = 0.0,
         n37 = 0.0,
         g7 = 0.0,
         g6 = 0.0,
         g5 = 0.0,
         g4 = 0.0,
         g3 = 0.0,
         g2 = 0.0,
         g1 = 0.0,
         g0 = 0.0,
         g9 = 0.0,
         g8 = 0.0,
         n85 = 0.0,
         n84 = 0.0,
         n87 = 0.0,
         n86 = 0.0,
         n81 = 0.0,
         n80 = 0.0,
         n83 = 0.0,
         n82 = 0.0,
         n89 = 0.0,
         n88 = 0.0,
         n129 = 0.0,
         n128 = 0.0,
         n125 = 0.0,
         n124 = 0.0,
         n127 = 0.0,
         n126 = 0.0,
         n121 = 0.0,
         n120 = 0.0,
         n123 = 0.0,
         n122 = 0.0,
         n12 = 0.0,
         n13 = 0.0,
         n10 = 0.0,
         n11 = 0.0,
         n16 = 0.0,
         n17 = 0.0,
         n14 = 0.0,
         n15 = 0.0,
         n18 = 0.0,
         n19 = 0.0,
         g26 = 0.0,
         g27 = 0.0,
         g24 = 0.0,
         g25 = 0.0,
         g22 = 0.0,
         g23 = 0.0,
         g20 = 0.0,
         g21 = 0.0,
         g28 = 0.0,
         g29 = 0.0,
         g100 = 0.0,
         g101 = 0.0,
         g102 = 0.0,
         g103 = 0.0,
         g104 = 0.0,
         g105 = 0.0,
         g106 = 0.0,
         g107 = 0.0,
         g108 = 0.0,
         g109 = 0.0,
         g53 = 0.0,
         g52 = 0.0,
         n149 = 0.0,
         g50 = 0.0,
         g57 = 0.0,
         g56 = 0.0,
         g55 = 0.0,
         g54 = 0.0,
         n143 = 0.0,
         n142 = 0.0,
         n141 = 0.0,
         n140 = 0.0,
         n147 = 0.0,
         n146 = 0.0,
         n145 = 0.0,
         n144 = 0.0,
         n74 = 0.0,
         n75 = 0.0,
         n76 = 0.0,
         n77 = 0.0,
         n70 = 0.0,
         n71 = 0.0,
         n72 = 0.0,
         n73 = 0.0,
         n109 = 0.0,
         n78 = 0.0,
         n79 = 0.0,
         n108 = 0.0,
         g75 = 0.0,
         g74 = 0.0,
         g77 = 0.0,
         g76 = 0.0,
         g71 = 0.0,
         g70 = 0.0,
         g73 = 0.0,
         g72 = 0.0,
         g79 = 0.0,
         g78 = 0.0,
         n58 = 0.0,
         n59 = 0.0,
         n56 = 0.0,
         n57 = 0.0,
         n54 = 0.0,
         n55 = 0.0,
         n52 = 0.0,
         n53 = 0.0,
         n50 = 0.0,
         n51 = 0.0,
         g51 = 0.0,
         n114 = 0.0,
         n115 = 0.0,
         n116 = 0.0,
         n148 = 0.0,
         n110 = 0.0,
         n111 = 0.0,
         n112 = 0.0,
         n113 = 0.0,
         n118 = 0.0,
         n119 = 0.0,
         n29 = 0.0,
         n28 = 0.0,
         n23 = 0.0,
         n22 = 0.0,
         n21 = 0.0,
         n20 = 0.0,
         n27 = 0.0,
         n26 = 0.0,
         n25 = 0.0,
         n24 = 0.0,
         g58 = 0.0,
         g19 = 0.0,
         g18 = 0.0,
         g17 = 0.0,
         g16 = 0.0,
         g15 = 0.0,
         g14 = 0.0,
         g13 = 0.0,
         g12 = 0.0,
         g11 = 0.0,
         g10 = 0.0,
         g84 = 0.0,
         g85 = 0.0,
         g86 = 0.0,
         g87 = 0.0,
         g80 = 0.0,
         g81 = 0.0,
         g82 = 0.0,
         g83 = 0.0,
         g88 = 0.0,
         g89 = 0.0,
         n117 = 0.0,
         n132 = 0.0,
         n133 = 0.0,
         n130 = 0.0,
         n131 = 0.0,
         n136 = 0.0,
         n137 = 0.0,
         n134 = 0.0,
         n135 = 0.0,
         n138 = 0.0,
         n139 = 0.0,
         g31 = 0.0,
         g30 = 0.0,
         g33 = 0.0,
         g32 = 0.0,
         g35 = 0.0,
         g34 = 0.0,
         g37 = 0.0,
         g36 = 0.0,
         g39 = 0.0,
         g38 = 0.0,
         n98 = 0.0,
         n99 = 0.0,
         n92 = 0.0,
         n93 = 0.0,
         n90 = 0.0,
         n91 = 0.0,
         n96 = 0.0,
         n97 = 0.0,
         n94 = 0.0,
         n95 = 0.0,
         n150 = 0.0,
         n151 = 0.0,
         n152 = 0.0,
         n153 = 0.0,
         n154 = 0.0,
         n155 = 0.0,
         n156 = 0.0,
         n157 = 0.0,
         n67 = 0.0,
         n66 = 0.0,
         n65 = 0.0,
         n64 = 0.0,
         n63 = 0.0,
         n62 = 0.0,
         n61 = 0.0,
         n60 = 0.0,
         n69 = 0.0,
         n68 = 0.0,
         g110 = 0.0,
         g59 = 0.0,
         g40 = 0.0,
         g41 = 0.0,
         g42 = 0.0,
         g43 = 0.0,
         g44 = 0.0,
         g45 = 0.0,
         g46 = 0.0,
         g47 = 0.0,
         g48 = 0.0,
         g49 = 0.0,
         n49 = 0.0,
         n48 = 0.0,
         n41 = 0.0,
         n40 = 0.0,
         n43 = 0.0,
         n42 = 0.0,
         n45 = 0.0,
         n44 = 0.0,
         n47 = 0.0,
         n46 = 0.0,
         n107 = 0.0,
         n106 = 0.0,
         g68 = 0.0,
         g69 = 0.0,
         g62 = 0.0,
         g63 = 0.0,
         g60 = 0.0,
         g61 = 0.0,
         g66 = 0.0,
         g67 = 0.0,
         g64 = 0.0,
         g65 = 0.0,
         g97 = 0.0,
         g96 = 0.0,
         g95 = 0.0,
         g94 = 0.0,
         g93 = 0.0,
         g92 = 0.0,
         g91 = 0.0,
         g90 = 0.0,
         g99 = 0.0,
         g98 = 0.0,
         n8 = 0.0,
         n9 = 0.0,
         n105 = 0.0,
         n104 = 0.0,
         n103 = 0.0,
         n102 = 0.0,
         n101 = 0.0,
         n100 = 0.0,
         n0 = 0.0,
         n1 = 0.0,
         n2 = 0.0,
         n3 = 0.0,
         n4 = 0.0,
         n5 = 0.0,
         n6 = 0.0,
         n7 = 0.0;
 
  int nuc;
  int i = 2;
  MW[0] = pyne::atomic_mass(j);
  MW[1] = pyne::atomic_mass(k);
  xF[0] = casc.mat_feed.comp[j];
  xF[1] = casc.mat_feed.comp[k];
  for(pyne::comp_iter ci = casc.mat_feed.comp.begin(); ci != casc.mat_feed.comp.end(); ci++)
  {
    nuc = (*ci).first;
    if (nuc == j || nuc == k)
        continue;
    MW[i] = pyne::atomic_mass(nuc);
    xF[i] = (*ci).second;
    i++;
  };

  switch (ncomp)
  {
    case 5:
      n0 = MW[0] - Mstar;
      std::cout << "n0 = " << n0 << "\n";
      n1 = log(alpha);
      std::cout << "n1 = " << n1 << "\n";
      n2 = xPj - xTj;
      std::cout << "n2 = " << n2 << "\n";
      n3 = xF[0] - xPj;
      std::cout << "n3 = " << n3 << "\n";
      n4 = MW[1] - Mstar;
      std::cout << "n4 = " << n4 << "\n";
      n5 = MW[2] - Mstar;
      std::cout << "n5 = " << n5 << "\n";
      n6 = MW[3] - Mstar;
      std::cout << "n6 = " << n6 << "\n";
      n7 = MW[4] - Mstar;
      std::cout << "n7 = " << n7 << "\n";
      n8 = log(xTj);
      std::cout << "n8 = " << n8 << "\n";
      n9 = xF[0]*xPj;
      std::cout << "n9 = " << n9 << "\n";
      n10 = -Mstar;
      std::cout << "n10 = " << n10 << "\n";
      n11 = 2*NP0;
      std::cout << "n11 = " << n11 << "\n";
      n12 = -xPj;
      std::cout << "n12 = " << n12 << "\n";
      n13 = -xF[0];
      std::cout << "n13 = " << n13 << "\n";
      n14 = -xTj;
      std::cout << "n14 = " << n14 << "\n";
      n15 = pow(n0, 2);
      std::cout << "n15 = " << n15 << "\n";
      n16 = pow(n1, 2);
      std::cout << "n16 = " << n16 << "\n";
      n17 = pow(n4, 2);
      std::cout << "n17 = " << n17 << "\n";
      n18 = pow(n5, 2);
      std::cout << "n18 = " << n18 << "\n";
      n19 = pow(n6, 2);
      std::cout << "n19 = " << n19 << "\n";
      n20 = pow(n7, 2);
      std::cout << "n20 = " << n20 << "\n";
      n21 = Mstar*n1;
      std::cout << "n21 = " << n21 << "\n";
      n22 = 2*n1;
      std::cout << "n22 = " << n22 << "\n";
      n23 = pow(alpha, NP0*n0);
      std::cout << "n23 = " << n23 << "\n";
      n24 = n13*xTj + n9;
      std::cout << "n24 = " << n24 << "\n";
      n25 = n12*xTj + n9;
      std::cout << "n25 = " << n25 << "\n";
      n26 = pow(alpha, NP0*n4);
      std::cout << "n26 = " << n26 << "\n";
      n27 = pow(alpha, NP0*n5);
      std::cout << "n27 = " << n27 << "\n";
      n28 = pow(alpha, NP0*n6);
      std::cout << "n28 = " << n28 << "\n";
      n29 = pow(alpha, NP0*n7);
      std::cout << "n29 = " << n29 << "\n";
      n30 = -MW[0]*n1;
      std::cout << "n30 = " << n30 << "\n";
      n31 = n2/n3;
      std::cout << "n31 = " << n31 << "\n";
      n32 = -n23 + 1;
      std::cout << "n32 = " << n32 << "\n";
      n33 = -n26 + 1;
      std::cout << "n33 = " << n33 << "\n";
      n34 = pow(alpha, n0*n11);
      std::cout << "n34 = " << n34 << "\n";
      n35 = pow(n24, 2);
      std::cout << "n35 = " << n35 << "\n";
      n36 = pow(n25, 2);
      std::cout << "n36 = " << n36 << "\n";
      n37 = -n27 + 1;
      std::cout << "n37 = " << n37 << "\n";
      n38 = -n28 + 1;
      std::cout << "n38 = " << n38 << "\n";
      n39 = -n29 + 1;
      std::cout << "n39 = " << n39 << "\n";
      n40 = -n37;
      std::cout << "n40 = " << n40 << "\n";
      n41 = -n38;
      std::cout << "n41 = " << n41 << "\n";
      n42 = -n23;
      std::cout << "n42 = " << n42 << "\n";
      n43 = 1/(n0*n1);
      std::cout << "n43 = " << n43 << "\n";
      n44 = n0*n16;
      std::cout << "n44 = " << n44 << "\n";
      n45 = n27*n5;
      std::cout << "n45 = " << n45 << "\n";
      n46 = n28*n6;
      std::cout << "n46 = " << n46 << "\n";
      n47 = n29*n7;
      std::cout << "n47 = " << n47 << "\n";
      n48 = n0*n23;
      std::cout << "n48 = " << n48 << "\n";
      n49 = n26*n4;
      std::cout << "n49 = " << n49 << "\n";
      n50 = n15*n16;
      std::cout << "n50 = " << n50 << "\n";
      n51 = log((-1.0 + xPj/xF[0])/n2);
      std::cout << "n51 = " << n51 << "\n";
      n52 = -n33*xF[1];
      std::cout << "n52 = " << n52 << "\n";
      n53 = -n39*xF[4];
      std::cout << "n53 = " << n53 << "\n";
      n54 = n25/n24;
      std::cout << "n54 = " << n54 << "\n";
      n55 = n16*n18*n27;
      std::cout << "n55 = " << n55 << "\n";
      n56 = n16*n20*n29;
      std::cout << "n56 = " << n56 << "\n";
      n57 = n23*n50;
      std::cout << "n57 = " << n57 << "\n";
      n58 = n16*n19*n28;
      std::cout << "n58 = " << n58 << "\n";
      n59 = n42*n54 + 1;
      std::cout << "n59 = " << n59 << "\n";
      n60 = pow(n59, 2);
      std::cout << "n60 = " << n60 << "\n";
      n61 = n21 + n30 + n51 + n8;
      std::cout << "n61 = " << n61 << "\n";
      n62 = n23*n54/n59;
      std::cout << "n62 = " << n62 << "\n";
      n63 = n16*n34*n36/(n35*n60);
      std::cout << "n63 = " << n63 << "\n";
      n64 = n43*(n61 - log(n59)) + 1;
      std::cout << "n64 = " << n64 << "\n";
      n65 = pow(alpha, n0*n64);
      std::cout << "n65 = " << n65 << "\n";
      n66 = pow(alpha, n4*n64);
      std::cout << "n66 = " << n66 << "\n";
      n67 = pow(alpha, n5*n64);
      std::cout << "n67 = " << n67 << "\n";
      n68 = pow(alpha, n6*n64);
      std::cout << "n68 = " << n68 << "\n";
      n69 = pow(alpha, n64*n7);
      std::cout << "n69 = " << n69 << "\n";
      n70 = n4/n66;
      std::cout << "n70 = " << n70 << "\n";
      n71 = n7/n69;
      std::cout << "n71 = " << n71 << "\n";
      n72 = n6/n68;
      std::cout << "n72 = " << n72 << "\n";
      n73 = n5/n67;
      std::cout << "n73 = " << n73 << "\n";
      n74 = n32 - 1 + 1.0/n65;
      std::cout << "n74 = " << n74 << "\n";
      n75 = n33 - 1 + 1.0/n66;
      std::cout << "n75 = " << n75 << "\n";
      n76 = n37 - 1 + 1.0/n67;
      std::cout << "n76 = " << n76 << "\n";
      n77 = n38 - 1 + 1.0/n68;
      std::cout << "n77 = " << n77 << "\n";
      n78 = n39 - 1 + 1.0/n69;
      std::cout << "n78 = " << n78 << "\n";
      n79 = pow(n74, 2);
      std::cout << "n79 = " << n79 << "\n";
      n80 = pow(n75, 2);
      std::cout << "n80 = " << n80 << "\n";
      n81 = pow(n76, 2);
      std::cout << "n81 = " << n81 << "\n";
      n82 = pow(n77, 2);
      std::cout << "n82 = " << n82 << "\n";
      n83 = pow(n78, 2);
      std::cout << "n83 = " << n83 << "\n";
      n84 = pow(n74, 3);
      std::cout << "n84 = " << n84 << "\n";
      n85 = pow(n75, 3);
      std::cout << "n85 = " << n85 << "\n";
      n86 = pow(n76, 3);
      std::cout << "n86 = " << n86 << "\n";
      n87 = pow(n77, 3);
      std::cout << "n87 = " << n87 << "\n";
      n88 = pow(n78, 3);
      std::cout << "n88 = " << n88 << "\n";
      n89 = xF[2]/n76;
      std::cout << "n89 = " << n89 << "\n";
      n90 = xF[4]/n78;
      std::cout << "n90 = " << n90 << "\n";
      n91 = xF[3]/n77;
      std::cout << "n91 = " << n91 << "\n";
      n92 = n1/n74;
      std::cout << "n92 = " << n92 << "\n";
      n93 = xF[0]/n79;
      std::cout << "n93 = " << n93 << "\n";
      n94 = n1*n91;
      std::cout << "n94 = " << n94 << "\n";
      n95 = n32/n74;
      std::cout << "n95 = " << n95 << "\n";
      n96 = n32*xF[0]/n84;
      std::cout << "n96 = " << n96 << "\n";
      n97 = n41*xF[3]/n82;
      std::cout << "n97 = " << n97 << "\n";
      n98 = n1*n49*xF[1]/n75;
      std::cout << "n98 = " << n98 << "\n";
      n99 = n57*xF[0]/n74;
      std::cout << "n99 = " << n99 << "\n";
      n100 = n16*n17*n26*xF[1]/n75;
      std::cout << "n100 = " << n100 << "\n";
      n101 = n31*n48*n92*xF[0];
      std::cout << "n101 = " << n101 << "\n";
      n102 = n13*n31*n48*n92;
      std::cout << "n102 = " << n102 << "\n";
      n103 = n31*n99;
      std::cout << "n103 = " << n103 << "\n";
      n104 = n100*n31;
      std::cout << "n104 = " << n104 << "\n";
      n105 = n31*n55*n89;
      std::cout << "n105 = " << n105 << "\n";
      n106 = n31*n58*n91;
      std::cout << "n106 = " << n106 << "\n";
      n107 = n31*n56*n90;
      std::cout << "n107 = " << n107 << "\n";
      n108 = 0.5*n103;
      std::cout << "n108 = " << n108 << "\n";
      n109 = n54/(n59*n65) + 1;
      std::cout << "n109 = " << n109 << "\n";
      n110 = n109*n32;
      std::cout << "n110 = " << n110 << "\n";
      n111 = n1*n48*n54/(n59*n65) + n1*n48;
      std::cout << "n111 = " << n111 << "\n";
      n112 = n1*n49 + n1*n62*n70;
      std::cout << "n112 = " << n112 << "\n";
      n113 = n1*n45 + n1*n62*n73;
      std::cout << "n113 = " << n113 << "\n";
      n114 = n1*n46 + n1*n62*n72;
      std::cout << "n114 = " << n114 << "\n";
      n115 = n1*n47 + n1*n62*n71;
      std::cout << "n115 = " << n115 << "\n";
      n116 = pow(n111, 2);
      std::cout << "n116 = " << n116 << "\n";
      n117 = pow(n112, 2);
      std::cout << "n117 = " << n117 << "\n";
      n118 = pow(n113, 2);
      std::cout << "n118 = " << n118 << "\n";
      n119 = pow(n114, 2);
      std::cout << "n119 = " << n119 << "\n";
      n120 = pow(n115, 2);
      std::cout << "n120 = " << n120 << "\n";
      n121 = n113*xF[2];
      std::cout << "n121 = " << n121 << "\n";
      n122 = n114*xF[3];
      std::cout << "n122 = " << n122 << "\n";
      n123 = n22*n48*n54/(n59*n65) + n22*n48;
      std::cout << "n123 = " << n123 << "\n";
      n124 = n1*n111;
      std::cout << "n124 = " << n124 << "\n";
      n125 = -2*n116;
      std::cout << "n125 = " << n125 << "\n";
      n126 = n54*n57/(n59*n65) + n57;
      std::cout << "n126 = " << n126 << "\n";
      n127 = n111*n32;
      std::cout << "n127 = " << n127 << "\n";
      n128 = n115*n53;
      std::cout << "n128 = " << n128 << "\n";
      n129 = n112/n80;
      std::cout << "n129 = " << n129 << "\n";
      n130 = 2*n120/n88;
      std::cout << "n130 = " << n130 << "\n";
      n131 = 2*n117/n85;
      std::cout << "n131 = " << n131 << "\n";
      n132 = 2*n118*xF[2]/n86;
      std::cout << "n132 = " << n132 << "\n";
      n133 = -2*n119*n38*xF[3]/n87;
      std::cout << "n133 = " << n133 << "\n";
      n134 = n13*n31*n32*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)/n79;
      std::cout << "n134 = " << n134 << "\n";
      n135 = n22*n31*n48*n93*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48);
      std::cout << "n135 = " << n135 << "\n";
      n136 = n22*n31*n49*xF[1]*(pow(alpha, NP0*n0 - n4*n64)*n1*n4*n54/n59 + n1*n49)/n80;
      std::cout << "n136 = " << n136 << "\n";
      n137 = n22*n31*n45*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n1*n5*n54/n59 + n1*n45)/n81;
      std::cout << "n137 = " << n137 << "\n";
      n138 = n22*n31*n46*xF[3]*(pow(alpha, NP0*n0 - n6*n64)*n1*n54*n6/n59 + n1*n46)/n82;
      std::cout << "n138 = " << n138 << "\n";
      n139 = n22*n31*n47*xF[4]*(pow(alpha, NP0*n0 - n64*n7)*n1*n54*n7/n59 + n1*n47)/n83;
      std::cout << "n139 = " << n139 << "\n";
      n140 = 1.0*n124*n31*n48*n93;
      std::cout << "n140 = " << n140 << "\n";
      n141 = n13*n31*n32*(pow(alpha, NP0*n0 - n0*n64)*n50*n54/n59 + n57)/n79;
      std::cout << "n141 = " << n141 << "\n";
      n142 = -0.5*n126*n31*n32*n93;
      std::cout << "n142 = " << n142 << "\n";
      n143 = n101 + n134;
      std::cout << "n143 = " << n143 << "\n";
      n144 = n16*n17*n26 - n17*n63/n66 + n34*n36*n44*n70/(n35*n60) + n44*n62*n70;
      std::cout << "n144 = " << n144 << "\n";
      n145 = -n18*n63/n67 + n34*n36*n44*n73/(n35*n60) + n44*n62*n73 + n55;
      std::cout << "n145 = " << n145 << "\n";
      n146 = -n20*n63/n69 + n34*n36*n44*n71/(n35*n60) + n44*n62*n71 + n56;
      std::cout << "n146 = " << n146 << "\n";
      n147 = n31*n52*(-pow(alpha, n0*n11 - n4*n64)*n16*n17*n36/(n35*n60) + pow(alpha, n0*n11 - n4*n64)*n36*n4*n44/(n35*n60) + n16*n17*n26 + n44*n62*n70)/n80;
      std::cout << "n147 = " << n147 << "\n";
      n148 = n31*n40*xF[2]*(-pow(alpha, n0*n11 - n5*n64)*n16*n18*n36/(n35*n60) + pow(alpha, n0*n11 - n5*n64)*n36*n44*n5/(n35*n60) + n44*n62*n73 + n55)/n81;
      std::cout << "n148 = " << n148 << "\n";
      n149 = n31*n97*(-pow(alpha, n0*n11 - n6*n64)*n16*n19*n36/(n35*n60) + pow(alpha, n0*n11 - n6*n64)*n36*n44*n6/(n35*n60) + n44*n62*n72 + n58);
      std::cout << "n149 = " << n149 << "\n";
      n150 = n31*n53*(-pow(alpha, n0*n11 - n64*n7)*n16*n20*n36/(n35*n60) + pow(alpha, n0*n11 - n64*n7)*n36*n44*n7/(n35*n60) + n44*n62*n71 + n56)/n83;
      std::cout << "n150 = " << n150 << "\n";
      n151 = n108 + n140 + n142;
      std::cout << "n151 = " << n151 << "\n";
      n152 = n1*n31*n45*n89 + n1*n31*n47*n90 + n114*n31*n97 + n121*n31*n40/n81 + n128*n31/n83 + n129*n31*n52 + n143 + n31*n46*n94 + n31*n98;
      std::cout << "n152 = " << n152 << "\n";
      n153 = n152*xTj;
      std::cout << "n153 = " << n153 << "\n";
      n154 = n103 + n104 + n105 + n106 + n107 + n135 + n136 + n137 + n138 + n139 + n141 + n147 + n148 + n149 + n150;
      std::cout << "n154 = " << n154 << "\n";
      n155 = n112*n31*n52*(n22*n49 + n22*n62*n70)/n85 + n121*n31*n40*(n22*n45 + n22*n62*n73)/n86 + n122*n31*n41*(n22*n46 + n22*n62*n72)/n87 + n128*n31*(n22*n47 + n22*n62*n71)/n88 + n13*n31*n32*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)*(pow(alpha, NP0*n0 - n0*n64)*n0*n22*n54/n59 + n22*n48)/n84 + n154;
      std::cout << "n155 = " << n155 << "\n";
      n156 = n155*xTj;
      std::cout << "n156 = " << n156 << "\n";
      n157 = -0.5*n111*n123*n31*n96 + n151 - 0.5*n156;
      std::cout << "n157 = " << n157 << "\n";
      NP_b = -n1*n110*n31*n48*n93 - n102 - n11*(1.0*n1*n31*n48*n93*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48) + n108 - 1.0*n116*n31*n96 - 0.5*n31*n32*n93*(pow(alpha, NP0*n0 - n0*n64)*n50*n54/n59 + n57) - 0.5*xTj*(n103 + n104 + n105 + n106 + n107 + n125*n31*n96 - n130*n31*n39*xF[4] - n131*n31*n33*xF[1] - n132*n31*n37 + n133*n31 + n135 + n136 + n137 + n138 + n139 + n141 + n31*n40*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n44*n5*n54/n59 - pow(alpha, n0*n11 - n5*n64)*n16*n18*n36/(n35*n60) + pow(alpha, n0*n11 - n5*n64)*n36*n44*n5/(n35*n60) + n55)/n81 + n31*n52*(pow(alpha, NP0*n0 - n4*n64)*n4*n44*n54/n59 - pow(alpha, n0*n11 - n4*n64)*n16*n17*n36/(n35*n60) + pow(alpha, n0*n11 - n4*n64)*n36*n4*n44/(n35*n60) + n16*n17*n26)/n80 + n31*n53*(pow(alpha, NP0*n0 - n64*n7)*n44*n54*n7/n59 - pow(alpha, n0*n11 - n64*n7)*n16*n20*n36/(n35*n60) + pow(alpha, n0*n11 - n64*n7)*n36*n44*n7/(n35*n60) + n56)/n83 + n31*n97*(pow(alpha, NP0*n0 - n6*n64)*n44*n54*n6/n59 - pow(alpha, n0*n11 - n6*n64)*n16*n19*n36/(n35*n60) + pow(alpha, n0*n11 - n6*n64)*n36*n44*n6/(n35*n60) + n58))) - n31*xTj*(n1*n45*n89 + n1*n47*n90 + n114*n97 + n121*n40/n81 + n128/n83 + n129*n52 + n13*n32*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)/n79 + n46*n94 + n48*n92*xF[0] + n98);
      std::cout << "NP_b = " << NP_b << "\n";
      NP_2a = -n31*(2*pow(n109, 2)*n34*n50*n96 - 2.0*n109*n34*n50*n93 + n110*n57*n93 - 1.0*n99 + 1.0*xTj*(n100 + n125*n96 + n13*n32*(pow(alpha, NP0*n0 - n0*n64)*n50*n54/n59 + n57)/n79 - n130*n39*xF[4] - n131*n33*xF[1] - n132*n37 + n133 + n22*n45*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n1*n5*n54/n59 + n1*n45)/n81 + n22*n46*xF[3]*(pow(alpha, NP0*n0 - n6*n64)*n1*n54*n6/n59 + n1*n46)/n82 + n22*n47*xF[4]*(pow(alpha, NP0*n0 - n64*n7)*n1*n54*n7/n59 + n1*n47)/n83 + n22*n48*n93*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48) + n22*n49*xF[1]*(pow(alpha, NP0*n0 - n4*n64)*n1*n4*n54/n59 + n1*n49)/n80 + n40*xF[2]*(-pow(alpha, n0*n11 - n5*n64)*n16*n18*n36/(n35*n60) + pow(alpha, n0*n11 - n5*n64)*n36*n44*n5/(n35*n60) + n44*n62*n73 + n55)/n81 + n52*(-pow(alpha, n0*n11 - n4*n64)*n16*n17*n36/(n35*n60) + pow(alpha, n0*n11 - n4*n64)*n36*n4*n44/(n35*n60) + n16*n17*n26 + n44*n62*n70)/n80 + n53*(-pow(alpha, n0*n11 - n64*n7)*n16*n20*n36/(n35*n60) + pow(alpha, n0*n11 - n64*n7)*n36*n44*n7/(n35*n60) + n44*n62*n71 + n56)/n83 + n55*n89 + n56*n90 + n58*n91 + n97*(-pow(alpha, n0*n11 - n6*n64)*n16*n19*n36/(n35*n60) + pow(alpha, n0*n11 - n6*n64)*n36*n44*n6/(n35*n60) + n44*n62*n72 + n58) + n99));
      std::cout << "NP_2a = " << NP_2a << "\n";
      NP_sqrt_base = pow(-n102 - n11*(1.0*n1*n31*n48*n93*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48) + n108 - 0.5*n31*n32*n93*(pow(alpha, NP0*n0 - n0*n64)*n50*n54/n59 + n57) - 0.5*n31*n96*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)*(pow(alpha, NP0*n0 - n0*n64)*n0*n22*n54/n59 + n22*n48) - 0.5*xTj*(n103 + n104 + n105 + n106 + n107 + n13*n31*n32*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)*(pow(alpha, NP0*n0 - n0*n64)*n0*n22*n54/n59 + n22*n48)/n84 + n135 + n136 + n137 + n138 + n139 + n141 + n31*n40*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n1*n5*n54/n59 + n1*n45)*(pow(alpha, NP0*n0 - n5*n64)*n22*n5*n54/n59 + n22*n45)/n86 + n31*n40*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n44*n5*n54/n59 - pow(alpha, n0*n11 - n5*n64)*n16*n18*n36/(n35*n60) + pow(alpha, n0*n11 - n5*n64)*n36*n44*n5/(n35*n60) + n55)/n81 + n31*n41*xF[3]*(pow(alpha, NP0*n0 - n6*n64)*n1*n54*n6/n59 + n1*n46)*(pow(alpha, NP0*n0 - n6*n64)*n22*n54*n6/n59 + n22*n46)/n87 + n31*n52*(pow(alpha, NP0*n0 - n4*n64)*n1*n4*n54/n59 + n1*n49)*(pow(alpha, NP0*n0 - n4*n64)*n22*n4*n54/n59 + n22*n49)/n85 + n31*n52*(pow(alpha, NP0*n0 - n4*n64)*n4*n44*n54/n59 - pow(alpha, n0*n11 - n4*n64)*n16*n17*n36/(n35*n60) + pow(alpha, n0*n11 - n4*n64)*n36*n4*n44/(n35*n60) + n16*n17*n26)/n80 + n31*n53*(pow(alpha, NP0*n0 - n64*n7)*n1*n54*n7/n59 + n1*n47)*(pow(alpha, NP0*n0 - n64*n7)*n22*n54*n7/n59 + n22*n47)/n88 + n31*n53*(pow(alpha, NP0*n0 - n64*n7)*n44*n54*n7/n59 - pow(alpha, n0*n11 - n64*n7)*n16*n20*n36/(n35*n60) + pow(alpha, n0*n11 - n64*n7)*n36*n44*n7/(n35*n60) + n56)/n83 + n31*n97*(pow(alpha, NP0*n0 - n6*n64)*n44*n54*n6/n59 - pow(alpha, n0*n11 - n6*n64)*n16*n19*n36/(n35*n60) + pow(alpha, n0*n11 - n6*n64)*n36*n44*n6/(n35*n60) + n58))) - n127*n31*n93 - n153, 2) + (-pow(NP0, 2)*n157 + NP0*(n14*(n1*n31*n45*n89 + n1*n31*n47*n90 + n143 + n31*n40*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n1*n5*n54/n59 + n1*n45)/n81 + n31*n46*n94 + n31*n52*(pow(alpha, NP0*n0 - n4*n64)*n1*n4*n54/n59 + n1*n49)/n80 + n31*n53*(pow(alpha, NP0*n0 - n64*n7)*n1*n54*n7/n59 + n1*n47)/n83 + n31*n97*(pow(alpha, NP0*n0 - n6*n64)*n1*n54*n6/n59 + n1*n46) + n31*n98) + n143) + n31*n95*xF[0] + xTj*(n13*n31*n95 + n31*n40*n89 + n31*n41*n91 + n31*n52/n75 + n31*n53/n78))*(2.0*n103 - 4.0*n116*n31*n96 + 4.0*n124*n31*n48*n93 - 2.0*n126*n31*n32*n93 - 2.0*n156);
      std::cout << "NP_sqrt_base = " << NP_sqrt_base << "\n";
      NP_sqrt_base = fabs(NP_sqrt_base);
      std::cout << "NP_sqrt_base = " << NP_sqrt_base << "\n";
      NP1 = (-NP_b - sqrt(NP_sqrt_base))/NP_2a;
      std::cout << "NP1 = " << NP1 << "\n";
      NT1 = n43*(n61 - log(-pow(alpha, NP1*n0)*n54 + 1));
      std::cout << "NT1 = " << NT1 << "\n";
      g0 = MW[1] - Mstar;
      std::cout << "g0 = " << g0 << "\n";
      g1 = MW[0] - Mstar;
      std::cout << "g1 = " << g1 << "\n";
      g2 = NT1 + 1;
      std::cout << "g2 = " << g2 << "\n";
      g3 = xPj - xTj;
      std::cout << "g3 = " << g3 << "\n";
      g4 = MW[2] - Mstar;
      std::cout << "g4 = " << g4 << "\n";
      g5 = MW[3] - Mstar;
      std::cout << "g5 = " << g5 << "\n";
      g6 = MW[4] - Mstar;
      std::cout << "g6 = " << g6 << "\n";
      g7 = xF[0] - xTj;
      std::cout << "g7 = " << g7 << "\n";
      g8 = xF[0] - xPj;
      std::cout << "g8 = " << g8 << "\n";
      g9 = -xTj;
      std::cout << "g9 = " << g9 << "\n";
      g10 = 1.0*xF[4];
      std::cout << "g10 = " << g10 << "\n";
      g11 = 1.0*xF[3];
      std::cout << "g11 = " << g11 << "\n";
      g12 = 1.0*xF[0];
      std::cout << "g12 = " << g12 << "\n";
      g13 = xPj/xF[1];
      std::cout << "g13 = " << g13 << "\n";
      g14 = pow(alpha, -g1);
      std::cout << "g14 = " << g14 << "\n";
      g15 = pow(alpha, -g0);
      std::cout << "g15 = " << g15 << "\n";
      g16 = pow(alpha, -g4);
      std::cout << "g16 = " << g16 << "\n";
      g17 = pow(alpha, -g5);
      std::cout << "g17 = " << g17 << "\n";
      g18 = pow(alpha, -g6);
      std::cout << "g18 = " << g18 << "\n";
      g19 = log(xF[0]/xF[1]);
      std::cout << "g19 = " << g19 << "\n";
      g20 = -g2;
      std::cout << "g20 = " << g20 << "\n";
      g21 = pow(alpha, NP1*g0);
      std::cout << "g21 = " << g21 << "\n";
      g22 = pow(alpha, NP1*g1);
      std::cout << "g22 = " << g22 << "\n";
      g23 = log(g14);
      std::cout << "g23 = " << g23 << "\n";
      g24 = pow(alpha, NP1*g4);
      std::cout << "g24 = " << g24 << "\n";
      g25 = pow(alpha, NP1*g5);
      std::cout << "g25 = " << g25 << "\n";
      g26 = pow(alpha, NP1*g6);
      std::cout << "g26 = " << g26 << "\n";
      g27 = -g19;
      std::cout << "g27 = " << g27 << "\n";
      g28 = g3/g7;
      std::cout << "g28 = " << g28 << "\n";
      g29 = g7/g3;
      std::cout << "g29 = " << g29 << "\n";
      g30 = -g21 + 1;
      std::cout << "g30 = " << g30 << "\n";
      g31 = -g21 + 1;
      std::cout << "g31 = " << g31 << "\n";
      g32 = -g22 + 1;
      std::cout << "g32 = " << g32 << "\n";
      g33 = -g24 + 1;
      std::cout << "g33 = " << g33 << "\n";
      g34 = -g25 + 1;
      std::cout << "g34 = " << g34 << "\n";
      g35 = -g26 + 1;
      std::cout << "g35 = " << g35 << "\n";
      g36 = -g22;
      std::cout << "g36 = " << g36 << "\n";
      g37 = -g24;
      std::cout << "g37 = " << g37 << "\n";
      g38 = -g25;
      std::cout << "g38 = " << g38 << "\n";
      g39 = -g26;
      std::cout << "g39 = " << g39 << "\n";
      g40 = -1.0*g19;
      std::cout << "g40 = " << g40 << "\n";
      g41 = -g3/g8;
      std::cout << "g41 = " << g41 << "\n";
      g42 = g40*xF[0];
      std::cout << "g42 = " << g42 << "\n";
      g43 = g40*xF[1];
      std::cout << "g43 = " << g43 << "\n";
      g44 = g40*xF[2];
      std::cout << "g44 = " << g44 << "\n";
      g45 = g40*xF[3];
      std::cout << "g45 = " << g45 << "\n";
      g46 = g40*xF[4];
      std::cout << "g46 = " << g46 << "\n";
      g47 = pow(alpha, g0*g20) - 1;
      std::cout << "g47 = " << g47 << "\n";
      g48 = pow(alpha, g0*g20) - 1;
      std::cout << "g48 = " << g48 << "\n";
      g49 = pow(alpha, g1*g20) - 1;
      std::cout << "g49 = " << g49 << "\n";
      g50 = pow(alpha, g20*g4) - 1;
      std::cout << "g50 = " << g50 << "\n";
      g51 = pow(alpha, g20*g5) - 1;
      std::cout << "g51 = " << g51 << "\n";
      g52 = pow(alpha, g20*g6) - 1;
      std::cout << "g52 = " << g52 << "\n";
      g53 = -pow(alpha, g1*g20);
      std::cout << "g53 = " << g53 << "\n";
      g54 = -pow(alpha, g20*g4);
      std::cout << "g54 = " << g54 << "\n";
      g55 = -pow(alpha, g20*g5);
      std::cout << "g55 = " << g55 << "\n";
      g56 = -pow(alpha, g20*g6);
      std::cout << "g56 = " << g56 << "\n";
      g57 = g8*g9/(g3*xF[1]);
      std::cout << "g57 = " << g57 << "\n";
      g58 = g31 + g48;
      std::cout << "g58 = " << g58 << "\n";
      g59 = -g22 - g53;
      std::cout << "g59 = " << g59 << "\n";
      g60 = -g24 - g54;
      std::cout << "g60 = " << g60 << "\n";
      g61 = -g25 - g55;
      std::cout << "g61 = " << g61 << "\n";
      g62 = -g26 - g56;
      std::cout << "g62 = " << g62 << "\n";
      g63 = pow(alpha, g1*g20) + g36;
      std::cout << "g63 = " << g63 << "\n";
      g64 = g31 + g48;
      std::cout << "g64 = " << g64 << "\n";
      g65 = pow(alpha, g20*g4) + g37;
      std::cout << "g65 = " << g65 << "\n";
      g66 = pow(alpha, g20*g5) + g38;
      std::cout << "g66 = " << g66 << "\n";
      g67 = pow(alpha, g20*g6) + g39;
      std::cout << "g67 = " << g67 << "\n";
      g68 = xF[1]/g64;
      std::cout << "g68 = " << g68 << "\n";
      g69 = xF[2]/g65;
      std::cout << "g69 = " << g69 << "\n";
      g70 = xF[1]/g58;
      std::cout << "g70 = " << g70 << "\n";
      g71 = xF[3]/g61;
      std::cout << "g71 = " << g71 << "\n";
      g72 = xF[0]/g59;
      std::cout << "g72 = " << g72 << "\n";
      g73 = xF[2]/g60;
      std::cout << "g73 = " << g73 << "\n";
      g74 = xF[4]/g62;
      std::cout << "g74 = " << g74 << "\n";
      g75 = g12/g59;
      std::cout << "g75 = " << g75 << "\n";
      g76 = 1.0*g73;
      std::cout << "g76 = " << g76 << "\n";
      g77 = 1.0*g70;
      std::cout << "g77 = " << g77 << "\n";
      g78 = g35/g62;
      std::cout << "g78 = " << g78 << "\n";
      g79 = g32/g59;
      std::cout << "g79 = " << g79 << "\n";
      g80 = g34/g61;
      std::cout << "g80 = " << g80 << "\n";
      g81 = g30/g58;
      std::cout << "g81 = " << g81 << "\n";
      g82 = g33/g60;
      std::cout << "g82 = " << g82 << "\n";
      g83 = g32*g72;
      std::cout << "g83 = " << g83 << "\n";
      g84 = g33*g73;
      std::cout << "g84 = " << g84 << "\n";
      g85 = g30*g70;
      std::cout << "g85 = " << g85 << "\n";
      g86 = g47/g58;
      std::cout << "g86 = " << g86 << "\n";
      g87 = g50/g60;
      std::cout << "g87 = " << g87 << "\n";
      g88 = g51/g61;
      std::cout << "g88 = " << g88 << "\n";
      g89 = g49/g59;
      std::cout << "g89 = " << g89 << "\n";
      g90 = g52/g62;
      std::cout << "g90 = " << g90 << "\n";
      g91 = g47*g70;
      std::cout << "g91 = " << g91 << "\n";
      g92 = g49*g72;
      std::cout << "g92 = " << g92 << "\n";
      g93 = g50*g73;
      std::cout << "g93 = " << g93 << "\n";
      g94 = log(g57*g64/g31);
      std::cout << "g94 = " << g94 << "\n";
      g95 = log(g57*g58/g30);
      std::cout << "g95 = " << g95 << "\n";
      g96 = log(g13*g29*g64/g48);
      std::cout << "g96 = " << g96 << "\n";
      g97 = 1.0*g94;
      std::cout << "g97 = " << g97 << "\n";
      g98 = log(g13*g29*g58/g47);
      std::cout << "g98 = " << g98 << "\n";
      g99 = 1.0*g96;
      std::cout << "g99 = " << g99 << "\n";
      g100 = g42 + g43 + g44 + g45 + g46;
      std::cout << "g100 = " << g100 << "\n";
      g101 = g78*g95;
      std::cout << "g101 = " << g101 << "\n";
      g102 = g79*g95;
      std::cout << "g102 = " << g102 << "\n";
      g103 = g82*g95;
      std::cout << "g103 = " << g103 << "\n";
      g104 = g81*g95;
      std::cout << "g104 = " << g104 << "\n";
      g105 = g80*g95;
      std::cout << "g105 = " << g105 << "\n";
      g106 = g87*g98;
      std::cout << "g106 = " << g106 << "\n";
      g107 = g88*g98;
      std::cout << "g107 = " << g107 << "\n";
      g108 = g90*g98;
      std::cout << "g108 = " << g108 << "\n";
      g109 = g86*g98;
      std::cout << "g109 = " << g109 << "\n";
      g110 = g89*g98;
      std::cout << "g110 = " << g110 << "\n";
      LpF = xF[0]*(g14 + 1.0)*(g102 + g110 + g27)/(g23*(g14 - 1.0)) + xF[1]*(g15 + 1.0)*(g104 + g109 + g27)/(g23*(g15 - 1.0)) + xF[2]*(g16 + 1.0)*(g103 + g106 + g27)/(g23*(g16 - 1.0)) + xF[3]*(g17 + 1.0)*(g105 + g107 + g27)/(g23*(g17 - 1.0)) + xF[4]*(g18 + 1.0)*(g101 + g108 + g27)/(g23*(g18 - 1.0));
      std::cout << "LpF = " << LpF << "\n";
      PpF = g29;
      std::cout << "PpF = " << PpF << "\n";
      TpF = -g8/g3;
      std::cout << "TpF = " << TpF << "\n";
      SWUpF = -g10*g94*(g39 + 1)/g67 - g10*g96*(pow(alpha, g20*g6) - 1)/g67 - g100 - g11*g94*(g38 + 1)/g66 - g11*g96*(pow(alpha, g20*g5) - 1)/g66 - g12*g94*(g36 + 1)/g63 - g12*g96*(pow(alpha, g1*g20) - 1)/g63 - g31*g68*g97 - g48*g68*g99 - g69*g97*(g37 + 1) - g69*g99*(pow(alpha, g20*g4) - 1);
      std::cout << "SWUpF = " << SWUpF << "\n";
      SWUpP = -g28*(g10*g101 + g10*g108 + g100 + g105*g11 + g107*g11 + g30*g77*g95 + g32*g75*g95 + g33*g76*g95 + g47*g77*g98 + g49*g75*g98 + g50*g76*g98);
      std::cout << "SWUpP = " << SWUpP << "\n";
      xP[0] = g28*g92;
      std::cout << "xP[0] = " << xP[0] << "\n";
      xP[1] = g28*g91;
      std::cout << "xP[1] = " << xP[1] << "\n";
      xP[2] = g28*g93;
      std::cout << "xP[2] = " << xP[2] << "\n";
      xP[3] = g28*g51*g71;
      std::cout << "xP[3] = " << xP[3] << "\n";
      xP[4] = g28*g52*g74;
      std::cout << "xP[4] = " << xP[4] << "\n";
      xT[0] = g41*g83;
      std::cout << "xT[0] = " << xT[0] << "\n";
      xT[1] = g41*g85;
      std::cout << "xT[1] = " << xT[1] << "\n";
      xT[2] = g41*g84;
      std::cout << "xT[2] = " << xT[2] << "\n";
      xT[3] = g34*g41*g71;
      std::cout << "xT[3] = " << xT[3] << "\n";
      xT[4] = g35*g41*g74;
      std::cout << "xT[4] = " << xT[4] << "\n";
      break;
 
  };

  i = 2;
  casc.mat_prod.comp[j] = xP[0];
  casc.mat_prod.comp[k] = xP[1];
  casc.mat_tail.comp[j] = xT[0];
  casc.mat_tail.comp[k] = xT[1];
  for(pyne::comp_iter ci = casc.mat_feed.comp.begin(); ci != casc.mat_feed.comp.end(); ci++)
  {
    nuc = (*ci).first;
    if (nuc == j || nuc == k)
        continue;
    casc.mat_prod.comp[nuc] = xP[i];
    casc.mat_tail.comp[nuc] = xT[i];
    i++;
  };
  // must renormalize to eliminate numerical error
  casc.mat_prod.norm_comp();
  casc.mat_tail.norm_comp();
  casc.mat_prod.mass = PpF;
  casc.mat_tail.mass = TpF;

  casc.N = NP1;
  casc.M = NT1;
  casc.l_t_per_feed = LpF;
  casc.swu_per_feed = SWUpF;
  casc.swu_per_prod = SWUpP;

  delete [] MW;
  delete [] xP;
  delete [] xF;
  delete [] xT;

  return casc;
};
