 
/*********************************************************/
/***            Symbolic Enrichment Functions          ***/
/*** WARNING: This file is auto-generated.             ***/
/***                  DO NOT MODIFY!!!                 ***/
/*********************************************************/
#ifndef PYNE_IS_AMALGAMATED
#include "enrichment_symbolic.h"
#endif

pyne::enrichment::Cascade pyne::enrichment::solve_symbolic(pyne::enrichment::Cascade & orig_casc)
{
  pyne::enrichment::Cascade casc = orig_casc;
  int j = casc.j;
  int k = casc.k;
  double alpha = casc.alpha;
  double NP0 = casc.N;
  //double NT0 = casc.M;
  double Mstar = casc.Mstar;
  double xPj = casc.x_prod_j;
  //double xFj = casc.x_feed_j;
  double xTj = casc.x_tail_j;
  int ncomp = casc.mat_feed.comp.size();
  double LpF = -1.0, PpF = -1.0, TpF = -1.0, 
         SWUpF = -1.0, SWUpP = -1.0, 
         NP_b = -1.0, NP_sqrt_base = -1.0, NP_2a = -1.0, 
         NP1 = -1.0, NT1 = -1.0;
  double * MW = new double [ncomp];
  double * xP = new double [ncomp];
  double * xF = new double [ncomp];
  double * xT = new double [ncomp];
  double n38 = 0.0,
         n39 = 0.0,
         n30 = 0.0,
         n31 = 0.0,
         n32 = 0.0,
         n33 = 0.0,
         n34 = 0.0,
         n35 = 0.0,
         n36 = 0.0,
         n37 = 0.0,
         g7 = 0.0,
         g6 = 0.0,
         g5 = 0.0,
         g4 = 0.0,
         g3 = 0.0,
         g2 = 0.0,
         g1 = 0.0,
         g0 = 0.0,
         g9 = 0.0,
         g8 = 0.0,
         n85 = 0.0,
         n84 = 0.0,
         n87 = 0.0,
         n86 = 0.0,
         n81 = 0.0,
         n80 = 0.0,
         n83 = 0.0,
         n82 = 0.0,
         n89 = 0.0,
         n88 = 0.0,
         n129 = 0.0,
         n128 = 0.0,
         n125 = 0.0,
         n124 = 0.0,
         n127 = 0.0,
         n126 = 0.0,
         n121 = 0.0,
         n120 = 0.0,
         n123 = 0.0,
         n122 = 0.0,
         n12 = 0.0,
         n13 = 0.0,
         n10 = 0.0,
         n11 = 0.0,
         n16 = 0.0,
         n17 = 0.0,
         n14 = 0.0,
         n15 = 0.0,
         n18 = 0.0,
         n19 = 0.0,
         g26 = 0.0,
         g27 = 0.0,
         g24 = 0.0,
         g25 = 0.0,
         g22 = 0.0,
         g23 = 0.0,
         g20 = 0.0,
         g21 = 0.0,
         g28 = 0.0,
         g29 = 0.0,
         g100 = 0.0,
         g101 = 0.0,
         g102 = 0.0,
         g103 = 0.0,
         g104 = 0.0,
         g105 = 0.0,
         g106 = 0.0,
         g107 = 0.0,
         g108 = 0.0,
         g109 = 0.0,
         g53 = 0.0,
         g52 = 0.0,
         g51 = 0.0,
         g50 = 0.0,
         g57 = 0.0,
         g56 = 0.0,
         g55 = 0.0,
         g54 = 0.0,
         n143 = 0.0,
         n142 = 0.0,
         g59 = 0.0,
         g58 = 0.0,
         n147 = 0.0,
         n146 = 0.0,
         n145 = 0.0,
         n144 = 0.0,
         n74 = 0.0,
         n75 = 0.0,
         n76 = 0.0,
         n77 = 0.0,
         n70 = 0.0,
         n71 = 0.0,
         n72 = 0.0,
         n73 = 0.0,
         n109 = 0.0,
         n78 = 0.0,
         n79 = 0.0,
         n108 = 0.0,
         g75 = 0.0,
         g74 = 0.0,
         g77 = 0.0,
         g76 = 0.0,
         g71 = 0.0,
         g70 = 0.0,
         g73 = 0.0,
         g72 = 0.0,
         g79 = 0.0,
         g78 = 0.0,
         n58 = 0.0,
         n59 = 0.0,
         n56 = 0.0,
         n57 = 0.0,
         n54 = 0.0,
         n55 = 0.0,
         n52 = 0.0,
         n53 = 0.0,
         n50 = 0.0,
         n51 = 0.0,
         n149 = 0.0,
         n114 = 0.0,
         n115 = 0.0,
         n116 = 0.0,
         n117 = 0.0,
         n110 = 0.0,
         n111 = 0.0,
         n112 = 0.0,
         n113 = 0.0,
         n118 = 0.0,
         n119 = 0.0,
         n29 = 0.0,
         n28 = 0.0,
         n23 = 0.0,
         n22 = 0.0,
         n21 = 0.0,
         n20 = 0.0,
         n27 = 0.0,
         n26 = 0.0,
         n25 = 0.0,
         n24 = 0.0,
         n140 = 0.0,
         g19 = 0.0,
         g18 = 0.0,
         g17 = 0.0,
         g16 = 0.0,
         g15 = 0.0,
         g14 = 0.0,
         g13 = 0.0,
         g12 = 0.0,
         g11 = 0.0,
         g10 = 0.0,
         n148 = 0.0,
         g84 = 0.0,
         g85 = 0.0,
         g86 = 0.0,
         g87 = 0.0,
         g80 = 0.0,
         g81 = 0.0,
         g82 = 0.0,
         g83 = 0.0,
         g88 = 0.0,
         g89 = 0.0,
         n132 = 0.0,
         n133 = 0.0,
         n130 = 0.0,
         n131 = 0.0,
         n136 = 0.0,
         n137 = 0.0,
         n134 = 0.0,
         n135 = 0.0,
         n138 = 0.0,
         n139 = 0.0,
         g31 = 0.0,
         g30 = 0.0,
         g33 = 0.0,
         g32 = 0.0,
         g35 = 0.0,
         g34 = 0.0,
         g37 = 0.0,
         g36 = 0.0,
         g39 = 0.0,
         g38 = 0.0,
         n98 = 0.0,
         n99 = 0.0,
         n92 = 0.0,
         n93 = 0.0,
         n90 = 0.0,
         n91 = 0.0,
         n96 = 0.0,
         n97 = 0.0,
         n94 = 0.0,
         n95 = 0.0,
         n150 = 0.0,
         n151 = 0.0,
         n152 = 0.0,
         n153 = 0.0,
         n154 = 0.0,
         n155 = 0.0,
         n156 = 0.0,
         n157 = 0.0,
         n67 = 0.0,
         n66 = 0.0,
         n65 = 0.0,
         n64 = 0.0,
         n63 = 0.0,
         n62 = 0.0,
         n61 = 0.0,
         n60 = 0.0,
         n69 = 0.0,
         n68 = 0.0,
         n141 = 0.0,
         g110 = 0.0,
         g40 = 0.0,
         g41 = 0.0,
         g42 = 0.0,
         g43 = 0.0,
         g44 = 0.0,
         g45 = 0.0,
         g46 = 0.0,
         g47 = 0.0,
         g48 = 0.0,
         g49 = 0.0,
         n49 = 0.0,
         n48 = 0.0,
         n41 = 0.0,
         n40 = 0.0,
         n43 = 0.0,
         n42 = 0.0,
         n45 = 0.0,
         n44 = 0.0,
         n47 = 0.0,
         n46 = 0.0,
         n107 = 0.0,
         n106 = 0.0,
         g68 = 0.0,
         g69 = 0.0,
         g62 = 0.0,
         g63 = 0.0,
         g60 = 0.0,
         g61 = 0.0,
         g66 = 0.0,
         g67 = 0.0,
         g64 = 0.0,
         g65 = 0.0,
         g97 = 0.0,
         g96 = 0.0,
         g95 = 0.0,
         g94 = 0.0,
         g93 = 0.0,
         g92 = 0.0,
         g91 = 0.0,
         g90 = 0.0,
         g99 = 0.0,
         g98 = 0.0,
         n8 = 0.0,
         n9 = 0.0,
         n105 = 0.0,
         n104 = 0.0,
         n103 = 0.0,
         n102 = 0.0,
         n101 = 0.0,
         n100 = 0.0,
         n0 = 0.0,
         n1 = 0.0,
         n2 = 0.0,
         n3 = 0.0,
         n4 = 0.0,
         n5 = 0.0,
         n6 = 0.0,
         n7 = 0.0;
 
  int nuc;
  int i = 2;
  MW[0] = pyne::atomic_mass(j);
  MW[1] = pyne::atomic_mass(k);
  xF[0] = casc.mat_feed.comp[j];
  xF[1] = casc.mat_feed.comp[k];
  for(pyne::comp_iter ci = casc.mat_feed.comp.begin(); ci != casc.mat_feed.comp.end(); ci++)
  {
    nuc = (*ci).first;
    if (nuc == j || nuc == k)
        continue;
    MW[i] = pyne::atomic_mass(nuc);
    xF[i] = (*ci).second;
    i++;
  };

  switch (ncomp)
  {
    case 3:
      n0 = -2.00000000000000;
      n1 = MW[0] - Mstar;
      n2 = log(alpha);
      n3 = xPj - xTj;
      n4 = xF[0] - xPj;
      n5 = MW[1] - Mstar;
      n6 = MW[2] - Mstar;
      n7 = log(xTj);
      n8 = -2;
      n9 = xF[0]*xPj;
      n10 = -Mstar;
      n11 = -xTj;
      n12 = -NP0*n0;
      n13 = pow(n1, -n0);
      n14 = pow(n2, -n0);
      n15 = pow(n5, -n0);
      n16 = pow(n6, -n0);
      n17 = Mstar*n2;
      n18 = -n0*n2;
      n19 = -n2;
      n20 = pow(alpha, NP0*n1);
      n21 = n11*xF[0] + n9;
      n22 = n11*xPj + n9;
      n23 = pow(alpha, NP0*n5);
      n24 = pow(alpha, NP0*n6);
      n25 = MW[0]*n19;
      n26 = n3/n4;
      n27 = -n14;
      n28 = -n20 + 1;
      n29 = -n23 + 1;
      n30 = pow(alpha, n1*n12);
      n31 = pow(n22, -n0);
      n32 = -n24 + 1;
      n33 = -n32;
      n34 = -n20;
      n35 = n1*n14;
      n36 = 1/(n1*n2);
      n37 = n24*n6;
      n38 = n23*n5;
      n39 = n1*n20;
      n40 = n28*xF[0];
      n41 = log((-1.0 + xPj/xF[0])/n3);
      n42 = n39*xF[0];
      n43 = -n29*xF[1];
      n44 = n22/n21;
      n45 = n14*n16*n24;
      n46 = n13*n14*n20;
      n47 = n13*n14*n30;
      n48 = n34*n44 + 1;
      n49 = n17 + n25 + n41 + n7;
      n50 = n36*(n49 - log(n48)) + 1;
      n51 = pow(alpha, n1*n50);
      n52 = pow(alpha, n5*n50);
      n53 = pow(alpha, n50*n6);
      n54 = n28 - 1 + 1.0/n51;
      n55 = n29 - 1 + 1.0/n52;
      n56 = n32 - 1 + 1.0/n53;
      n57 = pow(n54, 3);
      n58 = pow(n55, 3);
      n59 = pow(n56, 3);
      n60 = xF[2]/n56;
      n61 = n2/n54;
      n62 = n40/n57;
      n63 = n2*n38*xF[1]/n55;
      n64 = 1/(n48*n51);
      n65 = n46*xF[0]/n54;
      n66 = n14*n15*n23*xF[1]/n55;
      n67 = n26*n42*n61;
      n68 = n19*n26*n42/n54;
      n69 = n20*n5/(n48*n52);
      n70 = n20*n6/(n48*n53);
      n71 = n26*n65;
      n72 = n26*n66;
      n73 = n26*n45*n60;
      n74 = 0.5*n71;
      n75 = n44*n64 + 1;
      n76 = pow(n21, n8)*n30*n31*pow(n48, n8)/n53;
      n77 = pow(n21, n8)*n30*n31*pow(n48, n8)/n52;
      n78 = n2*n39*n44*n64 + n2*n39;
      n79 = n2*n38 + n2*n44*n69;
      n80 = n2*n37 + n2*n44*n70;
      n81 = pow(n78, -n0);
      n82 = pow(n79, -n0);
      n83 = pow(n80, -n0);
      n84 = n80*xF[2];
      n85 = n18*n39*n44*n64 + n18*n39;
      n86 = n44*n46*n64 + n46;
      n87 = pow(n54, n8)*n78;
      n88 = pow(n55, n8)*n79;
      n89 = n29*n82*xF[1]/n58;
      n90 = n40*pow(n54, n8)*n86;
      n91 = -n26*n40*n87;
      n92 = n18*n26*n42*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n1*n2*n44/n48 + n2*n39);
      n93 = n18*n26*n38*pow(n55, n8)*xF[1]*(pow(alpha, NP0*n1 - n5*n50)*n2*n44*n5/n48 + n2*n38);
      n94 = n18*n26*n37*pow(n56, n8)*xF[2]*(pow(alpha, NP0*n1 - n50*n6)*n2*n44*n6/n48 + n2*n37);
      n95 = 1.0*n2*n26*n42*n87;
      n96 = -n26*n90;
      n97 = -0.5*n26*n90;
      n98 = -n78*n85;
      n99 = n67 + n91;
      n100 = n14*n15*n23 + n15*n27*n77 + n35*n44*n69 + n35*n5*n77;
      n101 = n16*n27*n76 + n35*n44*n70 + n35*n6*n76 + n45;
      n102 = n26*n43*pow(n55, n8)*(pow(alpha, n1*n12 - n5*n50)*n15*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n5*n50)*pow(n21, n8)*n31*n35*pow(n48, n8)*n5 + n14*n15*n23 + n35*n44*n69);
      n103 = n26*n33*pow(n56, n8)*xF[2]*(pow(alpha, n1*n12 - n50*n6)*n16*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n50*n6)*pow(n21, n8)*n31*n35*pow(n48, n8)*n6 + n35*n44*n70 + n45);
      n104 = n74 + n95 + n97;
      n105 = n2*n26*n37*n60 + n26*n33*pow(n56, n8)*n84 + n26*n43*n88 + n26*n63 + n99;
      n106 = n102 + n103 + n71 + n72 + n73 + n92 + n93 + n94 + n96;
      n107 = n106 + n26*n33*n84*(n18*n37 + n18*n44*n70)/n59 + n26*n43*n79*(n18*n38 + n18*n44*n69)/n58 + n26*n62*n98;
      NP_b = -n12*(1.0*n2*n26*n42*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n1*n2*n44/n48 + n2*n39) - 0.5*n26*n40*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n13*n14*n44/n48 + n46) - 1.0*n26*n62*n81 + n74 - 0.5*xTj*(n26*n32*n8*n83*xF[2]/n59 + n26*n33*pow(n56, n8)*xF[2]*(pow(alpha, NP0*n1 - n50*n6)*n35*n44*n6/n48 + pow(alpha, n1*n12 - n50*n6)*n16*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n50*n6)*pow(n21, n8)*n31*n35*pow(n48, n8)*n6 + n45) - n26*n40*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n13*n14*n44/n48 + n46) + n26*n43*pow(n55, n8)*(pow(alpha, NP0*n1 - n5*n50)*n35*n44*n5/n48 + pow(alpha, n1*n12 - n5*n50)*n15*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n5*n50)*pow(n21, n8)*n31*n35*pow(n48, n8)*n5 + n14*n15*n23) + n26*n62*n8*n81 + n26*n8*n89 + n71 + n72 + n73 + n92 + n93 + n94)) - n2*n26*n39*n40*pow(n54, n8)*n75 - n26*xTj*(n2*n37*n60 + n33*pow(n56, n8)*n84 - n40*n87 + n42*n61 + n43*n88 + n63) - n68;
      NP_2a = -n26*(n0*n13*n27*n30*n62*pow(n75, -n0) + n0*n47*pow(n54, n8)*n75*xF[0] + n40*n46*pow(n54, n8)*n75 - 1.0*n65 + 1.0*xTj*(n18*n37*pow(n56, n8)*xF[2]*(pow(alpha, NP0*n1 - n50*n6)*n2*n44*n6/n48 + n2*n37) + n18*n38*pow(n55, n8)*xF[1]*(pow(alpha, NP0*n1 - n5*n50)*n2*n44*n5/n48 + n2*n38) + n18*n42*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n1*n2*n44/n48 + n2*n39) + n32*n8*n83*xF[2]/n59 + n33*pow(n56, n8)*xF[2]*(pow(alpha, n1*n12 - n50*n6)*n16*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n50*n6)*pow(n21, n8)*n31*n35*pow(n48, n8)*n6 + n35*n44*n70 + n45) + n43*pow(n55, n8)*(pow(alpha, n1*n12 - n5*n50)*n15*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n5*n50)*pow(n21, n8)*n31*n35*pow(n48, n8)*n5 + n14*n15*n23 + n35*n44*n69) + n45*n60 + n62*n8*n81 + n65 + n66 + n8*n89 - n90));
      NP_sqrt_base = (NP0*(n11*(n2*n26*n37*n60 + n26*n33*pow(n56, n8)*xF[2]*(pow(alpha, NP0*n1 - n50*n6)*n2*n44*n6/n48 + n2*n37) - n26*n40*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n1*n2*n44/n48 + n2*n39) + n26*n43*pow(n55, n8)*(pow(alpha, NP0*n1 - n5*n50)*n2*n44*n5/n48 + n2*n38) + n26*n63 + n67) + n99) + n26*n40/n54 + xTj*(n26*n33*n60 - n26*n40/n54 + n26*n43/n55) + pow(NP0, -n0)*(0.5*n107*xTj - 1.0*n2*n26*n42*n87 + 0.5*n26*n62*n78*n85 + 0.5*n26*n90 - 0.5*n71))*(-n0*n11*(n26*n33*pow(n56, n8)*xF[2]*(pow(alpha, NP0*n1 - n50*n6)*n35*n44*n6/n48 + pow(alpha, n1*n12 - n50*n6)*n16*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n50*n6)*pow(n21, n8)*n31*n35*pow(n48, n8)*n6 + n45) + n26*n33*xF[2]*(pow(alpha, NP0*n1 - n50*n6)*n18*n44*n6/n48 + n18*n37)*(pow(alpha, NP0*n1 - n50*n6)*n2*n44*n6/n48 + n2*n37)/n59 - n26*n40*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n13*n14*n44/n48 + n46) + n26*n43*pow(n55, n8)*(pow(alpha, NP0*n1 - n5*n50)*n35*n44*n5/n48 + pow(alpha, n1*n12 - n5*n50)*n15*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n5*n50)*pow(n21, n8)*n31*n35*pow(n48, n8)*n5 + n14*n15*n23) + n26*n43*(pow(alpha, NP0*n1 - n5*n50)*n18*n44*n5/n48 + n18*n38)*(pow(alpha, NP0*n1 - n5*n50)*n2*n44*n5/n48 + n2*n38)/n58 - n26*n62*(pow(alpha, NP0*n1 - n1*n50)*n1*n18*n44/n48 + n18*n39)*(pow(alpha, NP0*n1 - n1*n50)*n1*n2*n44/n48 + n2*n39) + n71 + n72 + n73 + n92 + n93 + n94) - n0*n71 - n0*n96 + 4.0*n2*n26*n42*n87 - 4.0*n26*n62*n81) + pow(-n105*xTj - n12*(1.0*n2*n26*n42*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n1*n2*n44/n48 + n2*n39) - 0.5*n26*n40*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n13*n14*n44/n48 + n46) - 0.5*n26*n62*(pow(alpha, NP0*n1 - n1*n50)*n1*n18*n44/n48 + n18*n39)*(pow(alpha, NP0*n1 - n1*n50)*n1*n2*n44/n48 + n2*n39) + n74 - 0.5*xTj*(n26*n33*pow(n56, n8)*xF[2]*(pow(alpha, NP0*n1 - n50*n6)*n35*n44*n6/n48 + pow(alpha, n1*n12 - n50*n6)*n16*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n50*n6)*pow(n21, n8)*n31*n35*pow(n48, n8)*n6 + n45) + n26*n33*xF[2]*(pow(alpha, NP0*n1 - n50*n6)*n18*n44*n6/n48 + n18*n37)*(pow(alpha, NP0*n1 - n50*n6)*n2*n44*n6/n48 + n2*n37)/n59 - n26*n40*pow(n54, n8)*(pow(alpha, NP0*n1 - n1*n50)*n13*n14*n44/n48 + n46) + n26*n43*pow(n55, n8)*(pow(alpha, NP0*n1 - n5*n50)*n35*n44*n5/n48 + pow(alpha, n1*n12 - n5*n50)*n15*pow(n21, n8)*n27*n31*pow(n48, n8) + pow(alpha, n1*n12 - n5*n50)*pow(n21, n8)*n31*n35*pow(n48, n8)*n5 + n14*n15*n23) + n26*n43*(pow(alpha, NP0*n1 - n5*n50)*n18*n44*n5/n48 + n18*n38)*(pow(alpha, NP0*n1 - n5*n50)*n2*n44*n5/n48 + n2*n38)/n58 - n26*n62*(pow(alpha, NP0*n1 - n1*n50)*n1*n18*n44/n48 + n18*n39)*(pow(alpha, NP0*n1 - n1*n50)*n1*n2*n44/n48 + n2*n39) + n71 + n72 + n73 + n92 + n93 + n94)) - n26*n40*n87 - n68, -n0);
      NP_sqrt_base = fabs(NP_sqrt_base);
      NP1 = (-NP_b - sqrt(NP_sqrt_base))/NP_2a;
      NT1 = n36*(n49 - log(-pow(alpha, NP1*n1)*n44 + 1));
      g0 = MW[1] - Mstar;
      g1 = MW[0] - Mstar;
      g2 = NT1 + 1;
      g3 = xPj - xTj;
      g4 = MW[2] - Mstar;
      g5 = xF[0] - xTj;
      g6 = xF[0] - xPj;
      g7 = -xTj;
      g8 = xPj/xF[1];
      g9 = pow(alpha, -g1);
      g10 = pow(alpha, -g0);
      g11 = pow(alpha, -g4);
      g12 = log(xF[0]/xF[1]);
      g13 = -g2;
      g14 = pow(alpha, NP1*g0);
      g15 = pow(alpha, NP1*g1);
      g16 = log(g9);
      g17 = pow(alpha, NP1*g4);
      g18 = -g12;
      g19 = g3/g5;
      g20 = g5/g3;
      g21 = -g14 + 1;
      g22 = -g14 + 1;
      g23 = -g15 + 1;
      g24 = -g17 + 1;
      g25 = -g15;
      g26 = -g17;
      g27 = -1.0*g12;
      g28 = -g3/g6;
      g29 = pow(alpha, g0*g13) - 1;
      g30 = pow(alpha, g0*g13) - 1;
      g31 = pow(alpha, g1*g13) - 1;
      g32 = pow(alpha, g13*g4) - 1;
      g33 = -pow(alpha, g1*g13);
      g34 = -pow(alpha, g13*g4);
      g35 = g6*g7/(g3*xF[1]);
      g36 = g22 + g30;
      g37 = -g15 - g33;
      g38 = -g17 - g34;
      g39 = pow(alpha, g1*g13) + g25;
      g40 = g22 + g30;
      g41 = pow(alpha, g13*g4) + g26;
      g42 = xF[1]/g40;
      g43 = xF[2]/g41;
      g44 = xF[0]/g39;
      g45 = xF[2]/g38;
      g46 = xF[1]/g36;
      g47 = xF[0]/g37;
      g48 = g23/g37;
      g49 = g21/g36;
      g50 = g24/g38;
      g51 = g32/g38;
      g52 = g29/g36;
      g53 = g31/g37;
      g54 = log(g35*g40/g22);
      g55 = log(g35*g36/g21);
      g56 = log(g20*g40*g8/g30);
      g57 = 1.0*g54;
      g58 = log(g20*g36*g8/g29);
      g59 = 1.0*g56;
      g60 = -g22*g42*g57 - g27*xF[0] - g27*xF[1] - g27*xF[2] - g30*g42*g59 - g43*g57*(g26 + 1) - g43*g59*(pow(alpha, g13*g4) - 1) - g44*g57*(g25 + 1) - g44*g59*(pow(alpha, g1*g13) - 1);
      LpF = xF[0]*(g9 + 1.0)*(g18 + g48*g55 + g53*g58)/(g16*(g9 - 1.0)) + xF[1]*(g10 + 1.0)*(g18 + g49*g55 + g52*g58)/(g16*(g10 - 1.0)) + xF[2]*(g11 + 1.0)*(g18 + g50*g55 + g51*g58)/(g16*(g11 - 1.0));
      PpF = g20;
      TpF = -g6/g3;
      SWUpF = g60;
      SWUpP = g19*g60;
      xP[0] = g19*g31*g47;
      xP[1] = g19*g29*g46;
      xP[2] = g19*g32*g45;
      xT[0] = g23*g28*g47;
      xT[1] = g21*g28*g46;
      xT[2] = g24*g28*g45;
      break;
    case 4:
      n0 = -0.500000000000000;
      n1 = MW[0] - Mstar;
      n2 = log(alpha);
      n3 = xPj - xTj;
      n4 = xF[0] - xPj;
      n5 = MW[1] - Mstar;
      n6 = MW[2] - Mstar;
      n7 = MW[3] - Mstar;
      n8 = log(xTj);
      n9 = -2;
      n10 = xF[0]*xPj;
      n11 = -Mstar;
      n12 = -xF[0];
      n13 = -xPj;
      n14 = -NP0*n9;
      n15 = -xTj;
      n16 = pow(n1, -n9);
      n17 = pow(n2, -n9);
      n18 = pow(n5, -n9);
      n19 = pow(n6, -n9);
      n20 = pow(n7, -n9);
      n21 = Mstar*n2;
      n22 = -n2*n9;
      n23 = pow(alpha, NP0*n1);
      n24 = n10 + n12*xTj;
      n25 = n10 + n13*xTj;
      n26 = pow(alpha, NP0*n5);
      n27 = pow(alpha, NP0*n6);
      n28 = pow(alpha, NP0*n7);
      n29 = -MW[0]*n2;
      n30 = n3/n4;
      n31 = -n23 + 1;
      n32 = -n26 + 1;
      n33 = pow(alpha, n1*n14);
      n34 = pow(n24, -n9);
      n35 = pow(n25, -n9);
      n36 = -n27 + 1;
      n37 = -n28 + 1;
      n38 = -n36;
      n39 = -n23;
      n40 = -n26;
      n41 = 1/(n1*n2);
      n42 = n1*n17;
      n43 = n27*n6;
      n44 = n37*xF[3];
      n45 = n28*n7;
      n46 = n1*n23;
      n47 = n32*xF[1];
      n48 = n26*n5;
      n49 = n16*n17;
      n50 = log((-1.0 + xPj/xF[0])/n3);
      n51 = n25/n24;
      n52 = n17*n19*n27;
      n53 = n23*n49;
      n54 = n17*n20*n28;
      n55 = n39*n51 + 1;
      n56 = pow(n55, -n9);
      n57 = n21 + n29 + n50 + n8;
      n58 = n23*n51/n55;
      n59 = n17*n33*n35/(n34*n56);
      n60 = n41*(n57 - log(n55)) + 1;
      n61 = pow(alpha, n1*n60);
      n62 = pow(alpha, n5*n60);
      n63 = pow(alpha, n6*n60);
      n64 = pow(alpha, n60*n7);
      n65 = n5/n62;
      n66 = n7/n64;
      n67 = n6/n63;
      n68 = n31 - 1 + 1.0/n61;
      n69 = n32 - 1 + 1.0/n62;
      n70 = n36 - 1 + 1.0/n63;
      n71 = n37 - 1 + 1.0/n64;
      n72 = pow(n68, -n9);
      n73 = pow(n69, -n9);
      n74 = pow(n70, -n9);
      n75 = pow(n71, -n9);
      n76 = pow(n68, 3);
      n77 = pow(n69, 3);
      n78 = pow(n70, 3);
      n79 = pow(n71, 3);
      n80 = xF[2]/n70;
      n81 = xF[3]/n71;
      n82 = n2/n68;
      n83 = xF[0]/n72;
      n84 = n2*n81;
      n85 = n31*xF[0]/n76;
      n86 = -n44/n75;
      n87 = n2*n48*xF[1]/n69;
      n88 = n53*xF[0]/n68;
      n89 = n17*n18*n26*xF[1]/n69;
      n90 = n12*n30*n46*n82;
      n91 = n30*n88;
      n92 = n30*n89;
      n93 = n30*n52*n80;
      n94 = n30*n54*n81;
      n95 = n0*n12*n30*n53/n68;
      n96 = n51/(n55*n61) + 1;
      n97 = n31*n96;
      n98 = n2*n46*n51/(n55*n61) + n2*n46;
      n99 = n2*n48 + n2*n58*n65;
      n100 = n2*n43 + n2*n58*n67;
      n101 = n2*n45 + n2*n58*n66;
      n102 = pow(n98, -n9);
      n103 = pow(n99, -n9);
      n104 = pow(n100, -n9);
      n105 = pow(n101, -n9);
      n106 = n100*xF[2];
      n107 = n22*n46*n51/(n55*n61) + n22*n46;
      n108 = n2*n98;
      n109 = n51*n53/(n55*n61) + n53;
      n110 = n103/n77;
      n111 = n105*n9/n79;
      n112 = n30*n31*n83*n98;
      n113 = n12*n2*n30*n46*n9*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)/n72;
      n114 = n22*n30*n48*xF[1]*(pow(alpha, NP0*n1 - n5*n60)*n2*n5*n51/n55 + n2*n48)/n73;
      n115 = n22*n30*n43*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n2*n51*n6/n55 + n2*n43)/n74;
      n116 = n22*n30*n45*xF[3]*(pow(alpha, NP0*n1 - n60*n7)*n2*n51*n7/n55 + n2*n45)/n75;
      n117 = 1.0*n108*n30*n46*n83;
      n118 = n12*n30*n31*(pow(alpha, NP0*n1 - n1*n60)*n49*n51/n55 + n53)/n72;
      n119 = n0*n109*n30*n31*n83;
      n120 = n17*n18*n26 - n18*n59/n62 + n33*n35*n42*n65/(n34*n56) + n42*n58*n65;
      n121 = -n19*n59/n63 + n33*n35*n42*n67/(n34*n56) + n42*n58*n67 + n52;
      n122 = -n30*n47*(-pow(alpha, n1*n14 - n5*n60)*n17*n18*n35/(n34*n56) + pow(alpha, n1*n14 - n5*n60)*n35*n42*n5/(n34*n56) + n17*n18*n26 + n42*n58*n65)/n73;
      n123 = n30*n38*xF[2]*(-pow(alpha, n1*n14 - n6*n60)*n17*n19*n35/(n34*n56) + pow(alpha, n1*n14 - n6*n60)*n35*n42*n6/(n34*n56) + n42*n58*n67 + n52)/n74;
      n124 = n30*n86*(-pow(alpha, n1*n14 - n60*n7)*n17*n20*n35/(n34*n56) + pow(alpha, n1*n14 - n60*n7)*n35*n42*n7/(n34*n56) + n42*n58*n66 + n54);
      n125 = xTj*(n101*n30*n86 + n106*n30*n38/n74 + n12*n30*n31*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)/n72 + n2*n30*n43*n80 + n30*n45*n84 + n30*n46*n82*xF[0] - n30*n47*n99/n73 + n30*n87);
      n126 = n112 + n125 + n90;
      n127 = n113 + n114 + n115 + n116 + n118 + n122 + n123 + n124 + n91 + n92 + n93 + n94;
      n128 = -n101*n30*n44*(n22*n45 + n22*n58*n66)/n79 + n106*n30*n38*(n22*n43 + n22*n58*n67)/n78 + n12*n30*n31*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)*(pow(alpha, NP0*n1 - n1*n60)*n1*n22*n51/n55 + n22*n46)/n76 + n127 - n30*n47*n99*(n22*n48 + n22*n58*n65)/n77;
      NP_b = -n14*(n0*n30*n31*n83*(pow(alpha, NP0*n1 - n1*n60)*n49*n51/n55 + n53) + n0*xTj*(n102*n30*n85*n9 + n104*n30*n36*n9*xF[2]/n78 + n110*n30*n47*n9 + n111*n30*n44 + n113 + n114 + n115 + n116 + n118 + n30*n38*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n42*n51*n6/n55 - pow(alpha, n1*n14 - n6*n60)*n17*n19*n35/(n34*n56) + pow(alpha, n1*n14 - n6*n60)*n35*n42*n6/(n34*n56) + n52)/n74 - n30*n47*(pow(alpha, NP0*n1 - n5*n60)*n42*n5*n51/n55 - pow(alpha, n1*n14 - n5*n60)*n17*n18*n35/(n34*n56) + pow(alpha, n1*n14 - n5*n60)*n35*n42*n5/(n34*n56) + n17*n18*n26)/n73 + n30*n86*(pow(alpha, NP0*n1 - n60*n7)*n42*n51*n7/n55 - pow(alpha, n1*n14 - n60*n7)*n17*n20*n35/(n34*n56) + pow(alpha, n1*n14 - n60*n7)*n35*n42*n7/(n34*n56) + n54) + n91 + n92 + n93 + n94) - 1.0*n102*n30*n85 + 1.0*n2*n30*n46*n83*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46) + n95) - n2*n30*n46*n83*n97 - n30*xTj*(n101*n86 + n106*n38/n74 + n12*n31*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)/n72 + n2*n43*n80 + n45*n84 + n46*n82*xF[0] - n47*n99/n73 + n87) - n90;
      NP_2a = -n30*(n12*n31*n33*n49*n9*pow(n96, -n9)/n76 - 2.0*n33*n49*n83*n96 + n53*n83*n97 - 1.0*n88 + 1.0*xTj*(n102*n85*n9 + n104*n36*n9*xF[2]/n78 + n110*n47*n9 + n111*n44 + n12*n2*n46*n9*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)/n72 + n12*n31*(pow(alpha, NP0*n1 - n1*n60)*n49*n51/n55 + n53)/n72 + n22*n43*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n2*n51*n6/n55 + n2*n43)/n74 + n22*n45*xF[3]*(pow(alpha, NP0*n1 - n60*n7)*n2*n51*n7/n55 + n2*n45)/n75 + n22*n48*xF[1]*(pow(alpha, NP0*n1 - n5*n60)*n2*n5*n51/n55 + n2*n48)/n73 + n38*xF[2]*(-pow(alpha, n1*n14 - n6*n60)*n17*n19*n35/(n34*n56) + pow(alpha, n1*n14 - n6*n60)*n35*n42*n6/(n34*n56) + n42*n58*n67 + n52)/n74 - n47*(-pow(alpha, n1*n14 - n5*n60)*n17*n18*n35/(n34*n56) + pow(alpha, n1*n14 - n5*n60)*n35*n42*n5/(n34*n56) + n17*n18*n26 + n42*n58*n65)/n73 + n52*n80 + n54*n81 + n86*(-pow(alpha, n1*n14 - n60*n7)*n17*n20*n35/(n34*n56) + pow(alpha, n1*n14 - n60*n7)*n35*n42*n7/(n34*n56) + n42*n58*n66 + n54) + n88 + n89));
      NP_sqrt_base = (-NP0*n126 - n12*n30*n31/(n31 - 1 + pow(alpha, -n1*(n41*(n57 - log(n25*n39/(n10 + n15*xF[0]) + 1)) + 1))) - n15*(-n30*n31*xF[0]/n68 - n30*n36*n80 - n30*n44/n71 - n30*n47/n69) - pow(NP0, -n9)*(-n0*n118 - n0*n12*n30*n31*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)*(pow(alpha, NP0*n1 - n1*n60)*n1*n22*n51/n55 + n22*n46)/n76 - n0*n15*(n113 + n114 + n115 + n116 + n118 + n12*n30*n31*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)*(pow(alpha, NP0*n1 - n1*n60)*n1*n22*n51/n55 + n22*n46)/n76 + n30*n38*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n2*n51*n6/n55 + n2*n43)*(pow(alpha, NP0*n1 - n6*n60)*n22*n51*n6/n55 + n22*n43)/n78 + n30*n38*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n42*n51*n6/n55 - pow(alpha, n1*n14 - n6*n60)*n17*n19*n35/(n34*n56) + pow(alpha, n1*n14 - n6*n60)*n35*n42*n6/(n34*n56) + n52)/n74 - n30*n44*(pow(alpha, NP0*n1 - n60*n7)*n2*n51*n7/n55 + n2*n45)*(pow(alpha, NP0*n1 - n60*n7)*n22*n51*n7/n55 + n22*n45)/n79 - n30*n47*(pow(alpha, NP0*n1 - n5*n60)*n2*n5*n51/n55 + n2*n48)*(pow(alpha, NP0*n1 - n5*n60)*n22*n5*n51/n55 + n22*n48)/n77 - n30*n47*(pow(alpha, NP0*n1 - n5*n60)*n42*n5*n51/n55 - pow(alpha, n1*n14 - n5*n60)*n17*n18*n35/(n34*n56) + pow(alpha, n1*n14 - n5*n60)*n35*n42*n5/(n34*n56) + n17*n18*n26)/n73 + n30*n86*(pow(alpha, NP0*n1 - n60*n7)*n42*n51*n7/n55 - pow(alpha, n1*n14 - n60*n7)*n17*n20*n35/(n34*n56) + pow(alpha, n1*n14 - n60*n7)*n35*n42*n7/(n34*n56) + n54) + n91 + n92 + n93 + n94) - n0*n91 + 1.0*n108*n30*n46*n83))*(-4.0*n102*n30*n85 + 4.0*n108*n30*n46*n83 - n118*n9 - n15*n9*(n113 + n114 + n115 + n116 + n118 + n12*n30*n31*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)*(pow(alpha, NP0*n1 - n1*n60)*n1*n22*n51/n55 + n22*n46)/n76 + n30*n38*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n2*n51*n6/n55 + n2*n43)*(pow(alpha, NP0*n1 - n6*n60)*n22*n51*n6/n55 + n22*n43)/n78 + n30*n38*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n42*n51*n6/n55 - pow(alpha, n1*n14 - n6*n60)*n17*n19*n35/(n34*n56) + pow(alpha, n1*n14 - n6*n60)*n35*n42*n6/(n34*n56) + n52)/n74 - n30*n44*(pow(alpha, NP0*n1 - n60*n7)*n2*n51*n7/n55 + n2*n45)*(pow(alpha, NP0*n1 - n60*n7)*n22*n51*n7/n55 + n22*n45)/n79 - n30*n47*(pow(alpha, NP0*n1 - n5*n60)*n2*n5*n51/n55 + n2*n48)*(pow(alpha, NP0*n1 - n5*n60)*n22*n5*n51/n55 + n22*n48)/n77 - n30*n47*(pow(alpha, NP0*n1 - n5*n60)*n42*n5*n51/n55 - pow(alpha, n1*n14 - n5*n60)*n17*n18*n35/(n34*n56) + pow(alpha, n1*n14 - n5*n60)*n35*n42*n5/(n34*n56) + n17*n18*n26)/n73 + n30*n86*(pow(alpha, NP0*n1 - n60*n7)*n42*n51*n7/n55 - pow(alpha, n1*n14 - n60*n7)*n17*n20*n35/(n34*n56) + pow(alpha, n1*n14 - n60*n7)*n35*n42*n7/(n34*n56) + n54) + n91 + n92 + n93 + n94) + 2.0*n91) + pow(-n126 - n14*(n0*n30*n31*n83*(pow(alpha, NP0*n1 - n1*n60)*n49*n51/n55 + n53) + n0*n30*n85*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)*(pow(alpha, NP0*n1 - n1*n60)*n1*n22*n51/n55 + n22*n46) + n0*xTj*(n113 + n114 + n115 + n116 + n118 + n12*n30*n31*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46)*(pow(alpha, NP0*n1 - n1*n60)*n1*n22*n51/n55 + n22*n46)/n76 + n30*n38*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n2*n51*n6/n55 + n2*n43)*(pow(alpha, NP0*n1 - n6*n60)*n22*n51*n6/n55 + n22*n43)/n78 + n30*n38*xF[2]*(pow(alpha, NP0*n1 - n6*n60)*n42*n51*n6/n55 - pow(alpha, n1*n14 - n6*n60)*n17*n19*n35/(n34*n56) + pow(alpha, n1*n14 - n6*n60)*n35*n42*n6/(n34*n56) + n52)/n74 - n30*n44*(pow(alpha, NP0*n1 - n60*n7)*n2*n51*n7/n55 + n2*n45)*(pow(alpha, NP0*n1 - n60*n7)*n22*n51*n7/n55 + n22*n45)/n79 - n30*n47*(pow(alpha, NP0*n1 - n5*n60)*n2*n5*n51/n55 + n2*n48)*(pow(alpha, NP0*n1 - n5*n60)*n22*n5*n51/n55 + n22*n48)/n77 - n30*n47*(pow(alpha, NP0*n1 - n5*n60)*n42*n5*n51/n55 - pow(alpha, n1*n14 - n5*n60)*n17*n18*n35/(n34*n56) + pow(alpha, n1*n14 - n5*n60)*n35*n42*n5/(n34*n56) + n17*n18*n26)/n73 + n30*n86*(pow(alpha, NP0*n1 - n60*n7)*n42*n51*n7/n55 - pow(alpha, n1*n14 - n60*n7)*n17*n20*n35/(n34*n56) + pow(alpha, n1*n14 - n60*n7)*n35*n42*n7/(n34*n56) + n54) + n91 + n92 + n93 + n94) + 1.0*n2*n30*n46*n83*(pow(alpha, NP0*n1 - n1*n60)*n1*n2*n51/n55 + n2*n46) + n95), -n9);
      NP_sqrt_base = fabs(NP_sqrt_base);
      NP1 = (-NP_b - pow(NP_sqrt_base, -n0))/NP_2a;
      NT1 = n41*(n57 - log(-pow(alpha, NP1*n1)*n51 + 1));
      g0 = MW[1] - Mstar;
      g1 = MW[0] - Mstar;
      g2 = NT1 + 1;
      g3 = xPj - xTj;
      g4 = MW[2] - Mstar;
      g5 = MW[3] - Mstar;
      g6 = xF[0] - xTj;
      g7 = xF[0] - xPj;
      g8 = -xTj;
      g9 = xPj/xF[1];
      g10 = pow(alpha, -g1);
      g11 = pow(alpha, -g0);
      g12 = pow(alpha, -g4);
      g13 = pow(alpha, -g5);
      g14 = log(xF[0]/xF[1]);
      g15 = -g2;
      g16 = pow(alpha, NP1*g0);
      g17 = pow(alpha, NP1*g1);
      g18 = log(g10);
      g19 = pow(alpha, NP1*g4);
      g20 = pow(alpha, NP1*g5);
      g21 = -g14;
      g22 = g3/g6;
      g23 = g6/g3;
      g24 = -g16 + 1;
      g25 = -g16 + 1;
      g26 = -g17 + 1;
      g27 = -g19 + 1;
      g28 = -g20 + 1;
      g29 = -g17;
      g30 = -g19;
      g31 = -g20;
      g32 = -1.0*g14;
      g33 = -g3/g7;
      g34 = pow(alpha, g0*g15) - 1;
      g35 = pow(alpha, g0*g15) - 1;
      g36 = pow(alpha, g1*g15) - 1;
      g37 = pow(alpha, g15*g4) - 1;
      g38 = pow(alpha, g15*g5) - 1;
      g39 = -pow(alpha, g1*g15);
      g40 = -pow(alpha, g15*g4);
      g41 = -pow(alpha, g15*g5);
      g42 = g7*g8/(g3*xF[1]);
      g43 = g25 + g35;
      g44 = -g17 - g39;
      g45 = -g19 - g40;
      g46 = -g20 - g41;
      g47 = pow(alpha, g1*g15) + g29;
      g48 = g25 + g35;
      g49 = pow(alpha, g15*g4) + g30;
      g50 = pow(alpha, g15*g5) + g31;
      g51 = xF[3]/g50;
      g52 = xF[1]/g48;
      g53 = xF[2]/g49;
      g54 = xF[0]/g47;
      g55 = xF[1]/g43;
      g56 = xF[0]/g44;
      g57 = xF[3]/g46;
      g58 = xF[2]/g45;
      g59 = g26/g44;
      g60 = g28/g46;
      g61 = g24/g43;
      g62 = g27/g45;
      g63 = g34/g43;
      g64 = g37/g45;
      g65 = g36/g44;
      g66 = g38/g46;
      g67 = log(g42*g48/g25);
      g68 = log(g42*g43/g24);
      g69 = log(g23*g48*g9/g35);
      g70 = 1.0*g67;
      g71 = log(g23*g43*g9/g34);
      g72 = 1.0*g69;
      g73 = -g25*g52*g70 - g32*xF[0] - g32*xF[1] - g32*xF[2] - g32*xF[3] - g35*g52*g72 - g51*g70*(g31 + 1) - g51*g72*(pow(alpha, g15*g5) - 1) - g53*g70*(g30 + 1) - g53*g72*(pow(alpha, g15*g4) - 1) - g54*g70*(g29 + 1) - g54*g72*(pow(alpha, g1*g15) - 1);
      LpF = xF[0]*(g10 + 1.0)*(g21 + g59*g68 + g65*g71)/(g18*(g10 - 1.0)) + xF[1]*(g11 + 1.0)*(g21 + g61*g68 + g63*g71)/(g18*(g11 - 1.0)) + xF[2]*(g12 + 1.0)*(g21 + g62*g68 + g64*g71)/(g18*(g12 - 1.0)) + xF[3]*(g13 + 1.0)*(g21 + g60*g68 + g66*g71)/(g18*(g13 - 1.0));
      PpF = g23;
      TpF = -g7/g3;
      SWUpF = g73;
      SWUpP = g22*g73;
      xP[0] = g22*g36*g56;
      xP[1] = g22*g34*g55;
      xP[2] = g22*g37*g58;
      xP[3] = g22*g38*g57;
      xT[0] = g26*g33*g56;
      xT[1] = g24*g33*g55;
      xT[2] = g27*g33*g58;
      xT[3] = g28*g33*g57;
      break;
    case 5:
      n0 = MW[0] - Mstar;
      n1 = log(alpha);
      n2 = xPj - xTj;
      n3 = xF[0] - xPj;
      n4 = MW[1] - Mstar;
      n5 = MW[2] - Mstar;
      n6 = MW[3] - Mstar;
      n7 = MW[4] - Mstar;
      n8 = log(xTj);
      n9 = xF[0]*xPj;
      n10 = -Mstar;
      n11 = 2*NP0;
      n12 = -xPj;
      n13 = -xF[0];
      n14 = -xTj;
      n15 = pow(n0, 2);
      n16 = pow(n1, 2);
      n17 = pow(n4, 2);
      n18 = pow(n5, 2);
      n19 = pow(n6, 2);
      n20 = pow(n7, 2);
      n21 = Mstar*n1;
      n22 = 2*n1;
      n23 = pow(alpha, NP0*n0);
      n24 = n13*xTj + n9;
      n25 = n12*xTj + n9;
      n26 = pow(alpha, NP0*n4);
      n27 = pow(alpha, NP0*n5);
      n28 = pow(alpha, NP0*n6);
      n29 = pow(alpha, NP0*n7);
      n30 = -MW[0]*n1;
      n31 = n2/n3;
      n32 = -n23 + 1;
      n33 = -n26 + 1;
      n34 = pow(alpha, n0*n11);
      n35 = pow(n24, 2);
      n36 = pow(n25, 2);
      n37 = -n27 + 1;
      n38 = -n28 + 1;
      n39 = -n29 + 1;
      n40 = -n37;
      n41 = -n38;
      n42 = -n23;
      n43 = 1/(n0*n1);
      n44 = n0*n16;
      n45 = n27*n5;
      n46 = n28*n6;
      n47 = n29*n7;
      n48 = n0*n23;
      n49 = n26*n4;
      n50 = n15*n16;
      n51 = log((-1.0 + xPj/xF[0])/n2);
      n52 = -n33*xF[1];
      n53 = -n39*xF[4];
      n54 = n25/n24;
      n55 = n16*n18*n27;
      n56 = n16*n20*n29;
      n57 = n23*n50;
      n58 = n16*n19*n28;
      n59 = n42*n54 + 1;
      n60 = pow(n59, 2);
      n61 = n21 + n30 + n51 + n8;
      n62 = n23*n54/n59;
      n63 = n16*n34*n36/(n35*n60);
      n64 = n43*(n61 - log(n59)) + 1;
      n65 = pow(alpha, n0*n64);
      n66 = pow(alpha, n4*n64);
      n67 = pow(alpha, n5*n64);
      n68 = pow(alpha, n6*n64);
      n69 = pow(alpha, n64*n7);
      n70 = n4/n66;
      n71 = n7/n69;
      n72 = n6/n68;
      n73 = n5/n67;
      n74 = n32 - 1 + 1.0/n65;
      n75 = n33 - 1 + 1.0/n66;
      n76 = n37 - 1 + 1.0/n67;
      n77 = n38 - 1 + 1.0/n68;
      n78 = n39 - 1 + 1.0/n69;
      n79 = pow(n74, 2);
      n80 = pow(n75, 2);
      n81 = pow(n76, 2);
      n82 = pow(n77, 2);
      n83 = pow(n78, 2);
      n84 = pow(n74, 3);
      n85 = pow(n75, 3);
      n86 = pow(n76, 3);
      n87 = pow(n77, 3);
      n88 = pow(n78, 3);
      n89 = xF[2]/n76;
      n90 = xF[4]/n78;
      n91 = xF[3]/n77;
      n92 = n1/n74;
      n93 = xF[0]/n79;
      n94 = n1*n91;
      n95 = n32/n74;
      n96 = n32*xF[0]/n84;
      n97 = n41*xF[3]/n82;
      n98 = n1*n49*xF[1]/n75;
      n99 = n57*xF[0]/n74;
      n100 = n16*n17*n26*xF[1]/n75;
      n101 = n31*n48*n92*xF[0];
      n102 = n13*n31*n48*n92;
      n103 = n31*n99;
      n104 = n100*n31;
      n105 = n31*n55*n89;
      n106 = n31*n58*n91;
      n107 = n31*n56*n90;
      n108 = 0.5*n103;
      n109 = n54/(n59*n65) + 1;
      n110 = n109*n32;
      n111 = n1*n48*n54/(n59*n65) + n1*n48;
      n112 = n1*n49 + n1*n62*n70;
      n113 = n1*n45 + n1*n62*n73;
      n114 = n1*n46 + n1*n62*n72;
      n115 = n1*n47 + n1*n62*n71;
      n116 = pow(n111, 2);
      n117 = pow(n112, 2);
      n118 = pow(n113, 2);
      n119 = pow(n114, 2);
      n120 = pow(n115, 2);
      n121 = n113*xF[2];
      n122 = n114*xF[3];
      n123 = n22*n48*n54/(n59*n65) + n22*n48;
      n124 = n1*n111;
      n125 = -2*n116;
      n126 = n54*n57/(n59*n65) + n57;
      n127 = n111*n32;
      n128 = n115*n53;
      n129 = n112/n80;
      n130 = 2*n120/n88;
      n131 = 2*n117/n85;
      n132 = 2*n118*xF[2]/n86;
      n133 = -2*n119*n38*xF[3]/n87;
      n134 = n13*n31*n32*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)/n79;
      n135 = n22*n31*n48*n93*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48);
      n136 = n22*n31*n49*xF[1]*(pow(alpha, NP0*n0 - n4*n64)*n1*n4*n54/n59 + n1*n49)/n80;
      n137 = n22*n31*n45*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n1*n5*n54/n59 + n1*n45)/n81;
      n138 = n22*n31*n46*xF[3]*(pow(alpha, NP0*n0 - n6*n64)*n1*n54*n6/n59 + n1*n46)/n82;
      n139 = n22*n31*n47*xF[4]*(pow(alpha, NP0*n0 - n64*n7)*n1*n54*n7/n59 + n1*n47)/n83;
      n140 = 1.0*n124*n31*n48*n93;
      n141 = n13*n31*n32*(pow(alpha, NP0*n0 - n0*n64)*n50*n54/n59 + n57)/n79;
      n142 = -0.5*n126*n31*n32*n93;
      n143 = n101 + n134;
      n144 = n16*n17*n26 - n17*n63/n66 + n34*n36*n44*n70/(n35*n60) + n44*n62*n70;
      n145 = -n18*n63/n67 + n34*n36*n44*n73/(n35*n60) + n44*n62*n73 + n55;
      n146 = -n20*n63/n69 + n34*n36*n44*n71/(n35*n60) + n44*n62*n71 + n56;
      n147 = n31*n52*(-pow(alpha, n0*n11 - n4*n64)*n16*n17*n36/(n35*n60) + pow(alpha, n0*n11 - n4*n64)*n36*n4*n44/(n35*n60) + n16*n17*n26 + n44*n62*n70)/n80;
      n148 = n31*n40*xF[2]*(-pow(alpha, n0*n11 - n5*n64)*n16*n18*n36/(n35*n60) + pow(alpha, n0*n11 - n5*n64)*n36*n44*n5/(n35*n60) + n44*n62*n73 + n55)/n81;
      n149 = n31*n97*(-pow(alpha, n0*n11 - n6*n64)*n16*n19*n36/(n35*n60) + pow(alpha, n0*n11 - n6*n64)*n36*n44*n6/(n35*n60) + n44*n62*n72 + n58);
      n150 = n31*n53*(-pow(alpha, n0*n11 - n64*n7)*n16*n20*n36/(n35*n60) + pow(alpha, n0*n11 - n64*n7)*n36*n44*n7/(n35*n60) + n44*n62*n71 + n56)/n83;
      n151 = n108 + n140 + n142;
      n152 = n1*n31*n45*n89 + n1*n31*n47*n90 + n114*n31*n97 + n121*n31*n40/n81 + n128*n31/n83 + n129*n31*n52 + n143 + n31*n46*n94 + n31*n98;
      n153 = n152*xTj;
      n154 = n103 + n104 + n105 + n106 + n107 + n135 + n136 + n137 + n138 + n139 + n141 + n147 + n148 + n149 + n150;
      n155 = n112*n31*n52*(n22*n49 + n22*n62*n70)/n85 + n121*n31*n40*(n22*n45 + n22*n62*n73)/n86 + n122*n31*n41*(n22*n46 + n22*n62*n72)/n87 + n128*n31*(n22*n47 + n22*n62*n71)/n88 + n13*n31*n32*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)*(pow(alpha, NP0*n0 - n0*n64)*n0*n22*n54/n59 + n22*n48)/n84 + n154;
      n156 = n155*xTj;
      n157 = -0.5*n111*n123*n31*n96 + n151 - 0.5*n156;
      NP_b = -n1*n110*n31*n48*n93 - n102 - n11*(1.0*n1*n31*n48*n93*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48) + n108 - 1.0*n116*n31*n96 - 0.5*n31*n32*n93*(pow(alpha, NP0*n0 - n0*n64)*n50*n54/n59 + n57) - 0.5*xTj*(n103 + n104 + n105 + n106 + n107 + n125*n31*n96 - n130*n31*n39*xF[4] - n131*n31*n33*xF[1] - n132*n31*n37 + n133*n31 + n135 + n136 + n137 + n138 + n139 + n141 + n31*n40*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n44*n5*n54/n59 - pow(alpha, n0*n11 - n5*n64)*n16*n18*n36/(n35*n60) + pow(alpha, n0*n11 - n5*n64)*n36*n44*n5/(n35*n60) + n55)/n81 + n31*n52*(pow(alpha, NP0*n0 - n4*n64)*n4*n44*n54/n59 - pow(alpha, n0*n11 - n4*n64)*n16*n17*n36/(n35*n60) + pow(alpha, n0*n11 - n4*n64)*n36*n4*n44/(n35*n60) + n16*n17*n26)/n80 + n31*n53*(pow(alpha, NP0*n0 - n64*n7)*n44*n54*n7/n59 - pow(alpha, n0*n11 - n64*n7)*n16*n20*n36/(n35*n60) + pow(alpha, n0*n11 - n64*n7)*n36*n44*n7/(n35*n60) + n56)/n83 + n31*n97*(pow(alpha, NP0*n0 - n6*n64)*n44*n54*n6/n59 - pow(alpha, n0*n11 - n6*n64)*n16*n19*n36/(n35*n60) + pow(alpha, n0*n11 - n6*n64)*n36*n44*n6/(n35*n60) + n58))) - n31*xTj*(n1*n45*n89 + n1*n47*n90 + n114*n97 + n121*n40/n81 + n128/n83 + n129*n52 + n13*n32*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)/n79 + n46*n94 + n48*n92*xF[0] + n98);
      NP_2a = -n31*(2*pow(n109, 2)*n34*n50*n96 - 2.0*n109*n34*n50*n93 + n110*n57*n93 - 1.0*n99 + 1.0*xTj*(n100 + n125*n96 + n13*n32*(pow(alpha, NP0*n0 - n0*n64)*n50*n54/n59 + n57)/n79 - n130*n39*xF[4] - n131*n33*xF[1] - n132*n37 + n133 + n22*n45*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n1*n5*n54/n59 + n1*n45)/n81 + n22*n46*xF[3]*(pow(alpha, NP0*n0 - n6*n64)*n1*n54*n6/n59 + n1*n46)/n82 + n22*n47*xF[4]*(pow(alpha, NP0*n0 - n64*n7)*n1*n54*n7/n59 + n1*n47)/n83 + n22*n48*n93*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48) + n22*n49*xF[1]*(pow(alpha, NP0*n0 - n4*n64)*n1*n4*n54/n59 + n1*n49)/n80 + n40*xF[2]*(-pow(alpha, n0*n11 - n5*n64)*n16*n18*n36/(n35*n60) + pow(alpha, n0*n11 - n5*n64)*n36*n44*n5/(n35*n60) + n44*n62*n73 + n55)/n81 + n52*(-pow(alpha, n0*n11 - n4*n64)*n16*n17*n36/(n35*n60) + pow(alpha, n0*n11 - n4*n64)*n36*n4*n44/(n35*n60) + n16*n17*n26 + n44*n62*n70)/n80 + n53*(-pow(alpha, n0*n11 - n64*n7)*n16*n20*n36/(n35*n60) + pow(alpha, n0*n11 - n64*n7)*n36*n44*n7/(n35*n60) + n44*n62*n71 + n56)/n83 + n55*n89 + n56*n90 + n58*n91 + n97*(-pow(alpha, n0*n11 - n6*n64)*n16*n19*n36/(n35*n60) + pow(alpha, n0*n11 - n6*n64)*n36*n44*n6/(n35*n60) + n44*n62*n72 + n58) + n99));
      NP_sqrt_base = pow(-n102 - n11*(1.0*n1*n31*n48*n93*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48) + n108 - 0.5*n31*n32*n93*(pow(alpha, NP0*n0 - n0*n64)*n50*n54/n59 + n57) - 0.5*n31*n96*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)*(pow(alpha, NP0*n0 - n0*n64)*n0*n22*n54/n59 + n22*n48) - 0.5*xTj*(n103 + n104 + n105 + n106 + n107 + n13*n31*n32*(pow(alpha, NP0*n0 - n0*n64)*n0*n1*n54/n59 + n1*n48)*(pow(alpha, NP0*n0 - n0*n64)*n0*n22*n54/n59 + n22*n48)/n84 + n135 + n136 + n137 + n138 + n139 + n141 + n31*n40*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n1*n5*n54/n59 + n1*n45)*(pow(alpha, NP0*n0 - n5*n64)*n22*n5*n54/n59 + n22*n45)/n86 + n31*n40*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n44*n5*n54/n59 - pow(alpha, n0*n11 - n5*n64)*n16*n18*n36/(n35*n60) + pow(alpha, n0*n11 - n5*n64)*n36*n44*n5/(n35*n60) + n55)/n81 + n31*n41*xF[3]*(pow(alpha, NP0*n0 - n6*n64)*n1*n54*n6/n59 + n1*n46)*(pow(alpha, NP0*n0 - n6*n64)*n22*n54*n6/n59 + n22*n46)/n87 + n31*n52*(pow(alpha, NP0*n0 - n4*n64)*n1*n4*n54/n59 + n1*n49)*(pow(alpha, NP0*n0 - n4*n64)*n22*n4*n54/n59 + n22*n49)/n85 + n31*n52*(pow(alpha, NP0*n0 - n4*n64)*n4*n44*n54/n59 - pow(alpha, n0*n11 - n4*n64)*n16*n17*n36/(n35*n60) + pow(alpha, n0*n11 - n4*n64)*n36*n4*n44/(n35*n60) + n16*n17*n26)/n80 + n31*n53*(pow(alpha, NP0*n0 - n64*n7)*n1*n54*n7/n59 + n1*n47)*(pow(alpha, NP0*n0 - n64*n7)*n22*n54*n7/n59 + n22*n47)/n88 + n31*n53*(pow(alpha, NP0*n0 - n64*n7)*n44*n54*n7/n59 - pow(alpha, n0*n11 - n64*n7)*n16*n20*n36/(n35*n60) + pow(alpha, n0*n11 - n64*n7)*n36*n44*n7/(n35*n60) + n56)/n83 + n31*n97*(pow(alpha, NP0*n0 - n6*n64)*n44*n54*n6/n59 - pow(alpha, n0*n11 - n6*n64)*n16*n19*n36/(n35*n60) + pow(alpha, n0*n11 - n6*n64)*n36*n44*n6/(n35*n60) + n58))) - n127*n31*n93 - n153, 2) + (-pow(NP0, 2)*n157 + NP0*(n14*(n1*n31*n45*n89 + n1*n31*n47*n90 + n143 + n31*n40*xF[2]*(pow(alpha, NP0*n0 - n5*n64)*n1*n5*n54/n59 + n1*n45)/n81 + n31*n46*n94 + n31*n52*(pow(alpha, NP0*n0 - n4*n64)*n1*n4*n54/n59 + n1*n49)/n80 + n31*n53*(pow(alpha, NP0*n0 - n64*n7)*n1*n54*n7/n59 + n1*n47)/n83 + n31*n97*(pow(alpha, NP0*n0 - n6*n64)*n1*n54*n6/n59 + n1*n46) + n31*n98) + n143) + n31*n95*xF[0] + xTj*(n13*n31*n95 + n31*n40*n89 + n31*n41*n91 + n31*n52/n75 + n31*n53/n78))*(2.0*n103 - 4.0*n116*n31*n96 + 4.0*n124*n31*n48*n93 - 2.0*n126*n31*n32*n93 - 2.0*n156);
      NP_sqrt_base = fabs(NP_sqrt_base);
      NP1 = (-NP_b - sqrt(NP_sqrt_base))/NP_2a;
      NT1 = n43*(n61 - log(-pow(alpha, NP1*n0)*n54 + 1));
      g0 = MW[1] - Mstar;
      g1 = MW[0] - Mstar;
      g2 = NT1 + 1;
      g3 = xPj - xTj;
      g4 = MW[2] - Mstar;
      g5 = MW[3] - Mstar;
      g6 = MW[4] - Mstar;
      g7 = xF[0] - xTj;
      g8 = xF[0] - xPj;
      g9 = -xTj;
      g10 = 1.0*xF[4];
      g11 = 1.0*xF[3];
      g12 = 1.0*xF[0];
      g13 = xPj/xF[1];
      g14 = pow(alpha, -g1);
      g15 = pow(alpha, -g0);
      g16 = pow(alpha, -g4);
      g17 = pow(alpha, -g5);
      g18 = pow(alpha, -g6);
      g19 = log(xF[0]/xF[1]);
      g20 = -g2;
      g21 = pow(alpha, NP1*g0);
      g22 = pow(alpha, NP1*g1);
      g23 = log(g14);
      g24 = pow(alpha, NP1*g4);
      g25 = pow(alpha, NP1*g5);
      g26 = pow(alpha, NP1*g6);
      g27 = -g19;
      g28 = g3/g7;
      g29 = g7/g3;
      g30 = -g21 + 1;
      g31 = -g21 + 1;
      g32 = -g22 + 1;
      g33 = -g24 + 1;
      g34 = -g25 + 1;
      g35 = -g26 + 1;
      g36 = -g22;
      g37 = -g24;
      g38 = -g25;
      g39 = -g26;
      g40 = -1.0*g19;
      g41 = -g3/g8;
      g42 = g40*xF[0];
      g43 = g40*xF[1];
      g44 = g40*xF[2];
      g45 = g40*xF[3];
      g46 = g40*xF[4];
      g47 = pow(alpha, g0*g20) - 1;
      g48 = pow(alpha, g0*g20) - 1;
      g49 = pow(alpha, g1*g20) - 1;
      g50 = pow(alpha, g20*g4) - 1;
      g51 = pow(alpha, g20*g5) - 1;
      g52 = pow(alpha, g20*g6) - 1;
      g53 = -pow(alpha, g1*g20);
      g54 = -pow(alpha, g20*g4);
      g55 = -pow(alpha, g20*g5);
      g56 = -pow(alpha, g20*g6);
      g57 = g8*g9/(g3*xF[1]);
      g58 = g31 + g48;
      g59 = -g22 - g53;
      g60 = -g24 - g54;
      g61 = -g25 - g55;
      g62 = -g26 - g56;
      g63 = pow(alpha, g1*g20) + g36;
      g64 = g31 + g48;
      g65 = pow(alpha, g20*g4) + g37;
      g66 = pow(alpha, g20*g5) + g38;
      g67 = pow(alpha, g20*g6) + g39;
      g68 = xF[1]/g64;
      g69 = xF[2]/g65;
      g70 = xF[1]/g58;
      g71 = xF[3]/g61;
      g72 = xF[0]/g59;
      g73 = xF[2]/g60;
      g74 = xF[4]/g62;
      g75 = g12/g59;
      g76 = 1.0*g73;
      g77 = 1.0*g70;
      g78 = g35/g62;
      g79 = g32/g59;
      g80 = g34/g61;
      g81 = g30/g58;
      g82 = g33/g60;
      g83 = g32*g72;
      g84 = g33*g73;
      g85 = g30*g70;
      g86 = g47/g58;
      g87 = g50/g60;
      g88 = g51/g61;
      g89 = g49/g59;
      g90 = g52/g62;
      g91 = g47*g70;
      g92 = g49*g72;
      g93 = g50*g73;
      g94 = log(g57*g64/g31);
      g95 = log(g57*g58/g30);
      g96 = log(g13*g29*g64/g48);
      g97 = 1.0*g94;
      g98 = log(g13*g29*g58/g47);
      g99 = 1.0*g96;
      g100 = g42 + g43 + g44 + g45 + g46;
      g101 = g78*g95;
      g102 = g79*g95;
      g103 = g82*g95;
      g104 = g81*g95;
      g105 = g80*g95;
      g106 = g87*g98;
      g107 = g88*g98;
      g108 = g90*g98;
      g109 = g86*g98;
      g110 = g89*g98;
      LpF = xF[0]*(g14 + 1.0)*(g102 + g110 + g27)/(g23*(g14 - 1.0)) + xF[1]*(g15 + 1.0)*(g104 + g109 + g27)/(g23*(g15 - 1.0)) + xF[2]*(g16 + 1.0)*(g103 + g106 + g27)/(g23*(g16 - 1.0)) + xF[3]*(g17 + 1.0)*(g105 + g107 + g27)/(g23*(g17 - 1.0)) + xF[4]*(g18 + 1.0)*(g101 + g108 + g27)/(g23*(g18 - 1.0));
      PpF = g29;
      TpF = -g8/g3;
      SWUpF = -g10*g94*(g39 + 1)/g67 - g10*g96*(pow(alpha, g20*g6) - 1)/g67 - g100 - g11*g94*(g38 + 1)/g66 - g11*g96*(pow(alpha, g20*g5) - 1)/g66 - g12*g94*(g36 + 1)/g63 - g12*g96*(pow(alpha, g1*g20) - 1)/g63 - g31*g68*g97 - g48*g68*g99 - g69*g97*(g37 + 1) - g69*g99*(pow(alpha, g20*g4) - 1);
      SWUpP = -g28*(g10*g101 + g10*g108 + g100 + g105*g11 + g107*g11 + g30*g77*g95 + g32*g75*g95 + g33*g76*g95 + g47*g77*g98 + g49*g75*g98 + g50*g76*g98);
      xP[0] = g28*g92;
      xP[1] = g28*g91;
      xP[2] = g28*g93;
      xP[3] = g28*g51*g71;
      xP[4] = g28*g52*g74;
      xT[0] = g41*g83;
      xT[1] = g41*g85;
      xT[2] = g41*g84;
      xT[3] = g34*g41*g71;
      xT[4] = g35*g41*g74;
      break;
 
  };

  i = 2;
  casc.mat_prod.comp[j] = xP[0];
  casc.mat_prod.comp[k] = xP[1];
  casc.mat_tail.comp[j] = xT[0];
  casc.mat_tail.comp[k] = xT[1];
  for(pyne::comp_iter ci = casc.mat_feed.comp.begin(); ci != casc.mat_feed.comp.end(); ci++)
  {
    nuc = (*ci).first;
    if (nuc == j || nuc == k)
        continue;
    casc.mat_prod.comp[nuc] = xP[i];
    casc.mat_tail.comp[nuc] = xT[i];
    i++;
  };
  // must renormalize to eliminate numerical error
  casc.mat_prod.norm_comp();
  casc.mat_tail.norm_comp();
  casc.mat_prod.mass = PpF;
  casc.mat_tail.mass = TpF;

  casc.N = NP1;
  casc.M = NT1;
  casc.l_t_per_feed = LpF;
  casc.swu_per_feed = SWUpF;
  casc.swu_per_prod = SWUpP;

  delete [] MW;
  delete [] xP;
  delete [] xF;
  delete [] xT;

  return casc;
};
