version: 2.1
# Commands part:
# Define macros that will be used to build and test PyNE.
# Save_container/pull_container macros are used to avoid repeting building PyNE
# for the testing jobs, it will only pull the saved container state...
commands:
  # Save Container change
  save_container:
    description: "Save container state"
    parameters:
        build:
          type: string
          default: "build"
    steps:
      - run: echo $CIRCLE_SHA1 > .<< parameters.build >>
      - run: echo $CIRCLE_SHA1
      - save_cache:
          key: v1-repo-{{ checksum ".<< parameters.build >>" }}
          paths:
            - ~/

  # Pull Container change
  pull_container:
    description: "Load container state"
    parameters:
        build:
          type: string
          default: "build"
    steps:
      - run: echo $CIRCLE_SHA1 > .<< parameters.build >>
      - run: echo $CIRCLE_SHA1
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".<< parameters.build >>" }}

  # Checkout and build PyNE  
  checkout_build:
    description: "Checkout PyNE, build with the provided flags"
    parameters:
      flags:
        type: string
        default: ""
      python:
        type: string
        default: "python2"
      build:
          type: string
          default: "build"
    steps:
      - checkout
      - run: << parameters.python >> setup.py install --user --clean << parameters.flags >> 
      - run: cd ../ && nuc_data_make ;
      - save_container:
          build: << parameters.build >>

  # Run PyNE test  
  run_test:
    description: "Run tests"
    parameters:
      flags:
        type: string
        default: ""
      build:
          type: string
          default: "build"
    steps:
      - pull_container:
          build: << parameters.build >>
      - run: |
          cd ~/repo/tests
          ./travis-run-tests.sh << parameters.flags >>

# Jobs part: 
# Define the different job that will be runned this separate building form
# testing for each configuration allowing to get more information out of the CI
jobs:
# Python 3 jobs 
  py3_build:
    docker:
      - image: pshriwise/pshriwise:ubuntu_17.04_pymoab_pyne
    working_directory: ~/repo
    steps:
      - checkout_build:
          python: "python3"
          flags: ""
          build: "python3"
  py3_test:
    docker:
      - image: pshriwise/pshriwise:ubuntu_17.04_pymoab_pyne
    working_directory: ~/repo
    steps:
      - run_test:
          flags: "python3"
          build: "python3"


# Python 2 jobs
# without optional depedencies
  py2_build:
    docker:
      - image: pyne/ubuntu_18.04_pyne-deps:latest
    working_directory: ~/repo
    steps:
      - checkout_build:
          flags: ""
          build: "python2"
  py2_test:
    docker:
      - image: pyne/ubuntu_18.04_pyne-deps:latest
    working_directory: ~/repo
    steps:
      - run_test:
          flags: "python2"
          build: "python2"

# With DAGMC
  py2_dagmc_build:
    docker:
      - image: pyne/ubuntu_18.04_dagmc_pyne-deps:latest
    working_directory: ~/repo
    steps:
      - checkout_build:
          flags: "--moab $HOME/opt/moab --dagmc $HOME/opt/dagmc"
          build: "python2_dagmc"
  py2_dagmc_test:
    docker:
      - image: pyne/ubuntu_18.04_dagmc_pyne-deps:latest
    working_directory: ~/repo
    steps:
      - run_test:
          flags: "python2"
          build: "python2_dagmc"

# With PyMOAB
  py2_pymoab_build:
    docker:
      - image: pyne/ubuntu_18.04_pymoab_pyne-deps:latest
    working_directory: ~/repo
    steps:
      - checkout_build:
          flags: "--moab $HOME/opt/moab"
          build: "python2_pymoab"
  py2_pymoab_test:
    docker:
      - image: pyne/ubuntu_18.04_pymoab_pyne-deps:latest
    working_directory: ~/repo
    steps:
      - run_test:
          flags: "python2"
          build: "python2_pymoab"
  
# With PyMOAB & DAGMC
  py2_dagmc_pymoab_build:
    docker:
      - image: pyne/ubuntu_18.04_dagmc_pymoab_pyne-deps:latest
    working_directory: ~/repo
    steps:
      - checkout_build:
          flags: "--moab $HOME/opt/moab --dagmc $HOME/opt/dagmc"
          build: "python2_dagmc_pymoab"
  py2_dagmc_pymoab_test:
    docker:
      - image: pyne/ubuntu_18.04_dagmc_pymoab_pyne-deps:latest
    working_directory: ~/repo
    steps:
      - run_test:
          flags: "python2"
          build: "python2_dagmc_pymoab"

# Workflow part: 
# This part defines the list of the jobs that will be ran and in which sequence.
# The goal was to avoid running advanced configuration if PyNE does not work
# with limited amount of dependencies.
workflows:
  version: 2
  build_and_test:
    jobs:
      - py3_build
      - py3_test:
          requires:
            - py3_build
    
      - py2_build
      - py2_test:
          requires:
            - py2_build

      - py2_dagmc_build:
          requires:
            - py2_build
      - py2_dagmc_test:
          requires:
            - py2_dagmc_build
      
      - py2_pymoab_build:
          requires:
            - py2_build
      - py2_pymoab_test:
          requires:
            - py2_pymoab_build
      
      - py2_dagmc_pymoab_build:
          requires:
            - py2_dagmc_build
            - py2_pymoab_build
      - py2_dagmc_pymoab_test:
          requires:
            - py2_dagmc_pymoab_build
